{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"npa-howtopay","text":"<p>package for ca_npa_howtopay</p>"},{"location":"#overview","title":"Overview","text":"<p>The <code>npa-howtopay</code> package provides functionality for analyzing energy costs and project economics under different expense scenarios.</p>"},{"location":"#scenario-definitions","title":"Scenario Definitions","text":"Scenario Name Description bau Business-as-usual (BAU): No NPA projects, baseline utility costs and spending. taxpayer All NPA costs are paid by taxpayers, not by utility customers. gas_capex Gas utility pays for NPA projects as capital expenditures (added to gas ratebase). gas_opex Gas utility pays for NPA projects as operating expenses (expensed in year incurred). electric_capex Electric utility pays for NPA projects as capital expenditures (added to electric ratebase). electric_opex Electric utility pays for NPA projects as operating expenses (expensed in year incurred). performance_incentive Cost savings are calculated as the NPV difference between avoided BAU costs and NPA costs. A percentage of savings are recovered as capex over 10 years <p>Each scenario specifies who pays for NPA projects (gas utility, electric utility, or taxpayers) and whether costs are treated as capital (capex) or operating (opex) expenses.</p>"},{"location":"#core-modules","title":"Core Modules","text":""},{"location":"#main-package-npa_howtopay","title":"Main Package (<code>npa_howtopay</code>)","text":"<ul> <li><code>run_model</code> - Main function to execute the cost analysis model for a single scenario</li> <li><code>run_all_scenarios</code> - Execute run_model for all scenarios and return all results</li> <li><code>create_delta_df</code> - Selects columns of interest from all results and calculates difference from BAU (expect for converter bills which are compared to non-converter bill in each scenario)</li> <li><code>return_absolute_values_df</code> - Concats dfs from <code>run_all_scenarios</code> and filters to selected columns</li> </ul>"},{"location":"#initialize-model","title":"Initialize Model","text":"<p>If running locally: - <code>load_scenario_from_yaml</code> - Load input parameters from YAML files In a local run, users can provide timeseries inputs for NPA projects, gas and electric fixed overhead, and planned LPP spending in each year,</p> <p>If running from web app: - <code>load_scenario_from_yaml</code> - Load input parameters from YAML files - <code>load_time_series_params_from_web_params</code> - Automatically creates time-series inputs using user defined constants.</p>"},{"location":"#parameters-params","title":"Parameters (<code>params</code>)","text":"<ul> <li><code>ElectricParams</code> - Electric utility parameters</li> <li><code>GasParams</code> - Gas utility parameters</li> <li><code>InputParams</code> - Input parameters for the model</li> <li><code>ScenarioParams</code> - Scenario-specific parameters (who pays (gas/electric/taxpayer), and how (capex/opex/none))</li> <li><code>SharedParams</code> - Shared parameters across scenarios</li> <li><code>TimeSeriesParams</code> - Time series data parameters. NPA projects per year, fixed overhead costs, gas LPP BAU spending</li> <li><code>KWH_PER_THERM</code> - Conversion constant</li> </ul>"},{"location":"#project-types","title":"Project Types","text":"<ul> <li><code>npa_project</code> - NPA project functionality</li> <li><code>capex_project</code> - Capital expenditure project functionality</li> </ul>"},{"location":"#utilities","title":"Utilities","text":"<ul> <li><code>model</code> - Core modeling logic</li> <li><code>utils</code> - Utility plotting functions</li> <li><code>web_params</code> - Web interface parameters</li> </ul>"},{"location":"#usage-examples","title":"Usage Examples","text":"<pre><code>from npa_howtopay import run_model, load_scenario_from_yaml\n# Local execution\n# Define scenarios\n  run_name = \"sample\" #should match yaml file name\n  scenario_runs = create_scenario_runs(2025, 2050, [\"gas\", \"electric\"], [\"capex\", \"opex\"])\n  input_params = load_scenario_from_yaml(run_name)\n  ts_params = load_time_series_params_from_yaml(run_name)\n  # Run model for all scenarios\n  results_df_all = run_all_scenarios(scenario_runs, input_params, ts_params)\n  # Single df with delta values\n  delta_df = create_delta_df(results_df_all, COMPARE_COLS)\n  # Single df with absolute values\n  results_df = return_absolute_values_df(results_df_all, COMPARE_COLS)\n</code></pre>"},{"location":"formulas/","title":"Formulas - NPA How to Pay Model","text":"<p>This document contains the  formulas implemented in the <code>npa-howtopay</code> model, organized by functional area.</p>"},{"location":"formulas/#variable-definitions","title":"Variable Definitions","text":""},{"location":"formulas/#customer-and-conversion-variables","title":"Customer and Conversion Variables","text":"Variable Description Units \\(N_{gas}(t)\\) Number of gas customers in year \\(t\\) customers \\(N_{gas}(0)\\) Initial number of gas customers customers \\(N_{electric}(t)\\) Number of electric customers in year \\(t\\) customers \\(N_{electric}(0)\\) Initial number of electric customers customers \\(N_{converts}(t)\\) Cumulative number of converted households including non-npa households through year \\(t\\) customers \\(N_{NPAconverts}(t)\\) Sum of NPA households converters in year \\(t\\) (excludes scattershot electrification) customers \\(N_{customers}(t)\\) Total number of customers in year \\(t\\) customers"},{"location":"formulas/#energy-usage-and-efficiency-variables","title":"Energy Usage and Efficiency Variables","text":"Variable Description Units \\(U_{gas}(t)\\) Total gas usage in therms in year \\(t\\) therms \\(U_{electric}(t)\\) Total electric usage in kWh in year \\(t\\) kWh \\(Q_{heating,therms}\\) Average per-customer heating need in therms therms/customer \\(Q_{electric,kWh}\\) Average per-customer electric need in kWh kWh/customer \\(K_{therm\\to kWh}\\) Conversion factor from therms to kWh kWh/therm \\(\\eta_{HP}\\) Heat pump efficiency dimensionless"},{"location":"formulas/#gas-system-variables","title":"Gas System Variables","text":"Variable Description Units \\(C_{gas,var}(t)\\) Gas variable costs in year \\(t\\) $ \\(C_{gas,fixed}(t)\\) Gas fixed costs in year \\(t\\) $ \\(C_{gas,overhead}(t)\\) Gas fixed overhead costs in year \\(t\\) $ \\(C_{gas,maintenance}(t)\\) Gas maintenance costs in year \\(t\\) $ \\(C_{gas,NPA,opex}(t)\\) Gas NPA OPEX in year \\(t\\) $ \\(C_{gas,opex}(t)\\) Gas OPEX costs in year \\(t\\) $ \\(R_{gas}(t)\\) Gas revenue requirement in year \\(t\\) $ \\(RB_{gas}(t)\\) Gas ratebase in year \\(t\\) $ \\(ror_{gas}\\) Gas rate of return % \\(D_{gas}(t)\\) Gas depreciation expense in year \\(t\\) $ \\(P_{gas}(t)\\) Gas generation cost per therm in year \\(t\\) $/therm"},{"location":"formulas/#electric-system-variables","title":"Electric System Variables","text":"Variable Description Units \\(C_{electric,var}(t)\\) Electric variable costs in year \\(t\\) $ \\(C_{electric,fixed}(t)\\) Electric fixed costs in year \\(t\\) $ \\(C_{electric,overhead}(t)\\) Electric fixed overhead costs in year \\(t\\) $ \\(C_{electric,maintenance}(t)\\) Electric maintenance costs in year \\(t\\) $ \\(C_{electric,NPA,opex}(t)\\) Electric NPA OPEX in year \\(t\\) $ \\(C_{electric,opex}(t)\\) Electric OPEX costs in year \\(t\\) $ \\(R_{electric}(t)\\) Electric revenue requirement in year \\(t\\) $ \\(RB_{electric}(t)\\) Electric ratebase in year \\(t\\) $ \\(ror_{electric}\\) Electric rate of return % \\(D_{electric}(t)\\) Electric depreciation expense in year \\(t\\) $ \\(P_{electric}(t)\\) Electricity generation cost per kWh in year \\(t\\) $/kWh \\(P_{peak,kw}\\) Distribution cost per peak kW increase $/kWh"},{"location":"formulas/#revenue-and-inflation-variables","title":"Revenue and Inflation Variables","text":"Variable Description Units \\(R(t)\\) Revenue requirement in year \\(t\\) $ \\(R_{adj}(t)\\) Inflation-adjusted revenue requirement in year \\(t\\) $ \\(R_{electric,adj}(t)\\) Inflation-adjusted electric revenue requirement in year \\(t\\) $ \\(R_{gas,adj}(t)\\) Inflation-adjusted gas revenue requirement in year \\(t\\) $ \\(d\\) Discount rate % \\(t_0\\) Start year year"},{"location":"formulas/#tariff-and-billing-variables","title":"Tariff and Billing Variables","text":"Variable Description Units \\(C_{electric,fixed,per\\_customer}\\) Electric fixed charge per customer (user input) $/customer \\(C_{electric,var,kWh}(t)\\) Electric volumetric tariff per kWh in year \\(t\\) $/kWh \\(C_{gas,fixed,per\\_customer}\\) Gas fixed charge per customer (user input) $/customer \\(C_{gas,var,therm}(t)\\) Gas volumetric tariff per therm in year \\(t\\) $/therm \\(B_{per\\_customer}(t)\\) Bill per customer in year \\(t\\) $/customer \\(B_{electric,converts}(t)\\) Electric bill per customer for converts in year \\(t\\) $/customer \\(B_{electric,nonconverts}(t)\\) Electric bill per customer for non-converts in year \\(t\\) $/customer \\(B_{total,converts}(t)\\) Total bill per customer for converts in year \\(t\\) $/customer \\(B_{total,nonconverts}(t)\\) Total bill per customer for non-converts in year \\(t\\) $/customer \\(B_{gas,nonconverts}(t)\\) Gas bill per customer for non-converts in year \\(t\\) $/customer"},{"location":"formulas/#depreciation-and-project-variables","title":"Depreciation and Project Variables","text":"Variable Description Units \\(f_{dep}(t, t_p, L)\\) Depreciation fraction for project \\(p\\) in year \\(t\\) dimensionless \\(RB(t)\\) Total ratebase in year \\(t\\) $ \\(D(t)\\) Total depreciation expense in year \\(t\\) $ \\(C_{maintenance}(t)\\) Total maintenance costs in year \\(t\\) $ \\(t_p\\) Project year for project \\(p\\) year \\(L_p\\) Depreciation lifetime for project \\(p\\) years \\(C_p\\) Original cost of project \\(p\\) $ \\(C_{p_{non-NPA}}\\) Original cost of non-NPA project \\(p\\) $ \\(m_{pct}\\) Maintenance cost percentage %"},{"location":"formulas/#synthetic-initial-project-variables","title":"Synthetic Initial Project Variables","text":"Variable Description Units \\(W_{total}\\) Total weight for synthetic initial projects dimensionless \\(L\\) Depreciation lifetime years \\(RB_{init}\\) Initial ratebase $ \\(C_{est}\\) Estimated original cost per year $/year"},{"location":"formulas/#gas-system-calculations","title":"Gas System Calculations","text":""},{"location":"formulas/#gas-number-of-customers","title":"Gas Number of customers","text":"<p>The number of gas customers decreases over time as customers convert to heat pumps. There is no growth in the number of gas customers:</p> \\[N_{gas}(t) = N_{gas}(0) - \\sum_{i=1}^{t} N_{converts}(i)\\] <p>Variables:</p> <ul> <li>\\(N_{gas}(t)\\): Number of gas customers in year \\(t\\)</li> <li>\\(N_{gas}(0)\\): Initial number of gas customers</li> <li>\\(N_{converts}(t)\\): Sum of NPA households and scattershot converters     in year \\(t\\).</li> </ul>"},{"location":"formulas/#total-gas-usage","title":"Total Gas Usage","text":"<p>Total gas usage is calculated as the product of remaining gas customers and their heating needs:</p> \\[U_{gas}(t) = N_{gas}(t) \\times Q_{heating,therms}\\] <p>Variables:</p> <ul> <li>\\(U_{gas}(t)\\): Total gas usage in therms in year \\(t\\)</li> <li>\\(Q_{heating,therms}\\): Average per-customer heating need in therms</li> </ul>"},{"location":"formulas/#gas-variable-costs","title":"Gas Variable Costs","text":"<p>Variable costs of the utility are based on total usage and generation costs:</p> \\[C_{gas,var}(t) = U_{gas}(t) \\times P_{gas}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{gas,var}(t)\\): Gas variable costs in year \\(t\\)</li> <li>\\(P_{gas}(t)\\): Gas generation cost per therm in year \\(t\\)</li> </ul>"},{"location":"formulas/#gas-fixed-costs","title":"Gas Fixed Costs","text":"<p>Fixed costs include overhead, maintenance, and NPA OPEX:</p> \\[C_{gas,fixed}(t) = C_{gas,overhead}(t) + C_{gas,maintenance}(t) + C_{gas,NPA,opex}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{gas,fixed}(t)\\): Gas fixed costs in year \\(t\\)</li> <li>\\(C_{gas,overhead}(t)\\): Gas fixed overhead costs in year \\(t\\)</li> <li>\\(C_{gas,maintenance}(t)\\): Gas maintenance costs in year \\(t\\)</li> <li>\\(C_{gas,NPA,opex}(t)\\): Gas NPA OPEX in year \\(t\\)</li> </ul>"},{"location":"formulas/#gas-opex-costs","title":"Gas OPEX Costs","text":"<p>Total gas operating expenses combine fixed and variable costs:</p> \\[C_{gas,opex}(t) = C_{gas,fixed}(t) + C_{gas,var}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{gas,opex}(t)\\): Gas OPEX costs in year \\(t\\)</li> <li>\\(C_{gas,fixed}(t)\\): Gas fixed costs in year \\(t\\)</li> <li>\\(C_{gas,var}(t)\\): Gas variable costs in year \\(t\\)</li> </ul>"},{"location":"formulas/#gas-avoided-lpp-spending","title":"Gas Avoided LPP Spending","text":"<p>The avoided LPP spending in a given year is the sum of the pipe value per customer times the number of converts for each NPA project in that year:</p> \\[C_{gas,LPP,avoided}(t) = \\sum_{p \\in P(t)} N_{converts}(p) \\times V_{pipe,user}(p)\\] <p>Variables:</p> <ul> <li>\\(C_{gas,LPP,avoided}(t)\\): Gas LPP spending avoided in year \\(t\\)</li> <li>\\(P(t)\\): Set of NPA projects in year \\(t\\)</li> <li>\\(N_{converts}(p)\\): Number of converts in project \\(p\\)</li> <li>\\(V_{pipe,user}(p)\\): Pipe value per user for project \\(p\\)</li> </ul>"},{"location":"formulas/#gas-revenue-requirement","title":"Gas Revenue Requirement","text":"<p>The gas revenue requirement includes ratebase return, OPEX, and depreciation. In the performance incentive scenario, it also includes performance incentives:</p> \\[R_{gas}(t) = RB_{gas}(t) \\times ror_{gas} + C_{gas,opex}(t) + D_{gas}(t) + PI_{gas}(t)\\] <p>Variables:</p> <ul> <li>\\(R_{gas}(t)\\): Gas revenue requirement in year \\(t\\)</li> <li>\\(RB_{gas}(t)\\): Gas ratebase in year \\(t\\)</li> <li>\\(ror_{gas}\\): Gas rate of return</li> <li>\\(C_{gas,opex}(t)\\): Gas OPEX costs in year \\(t\\)</li> <li>\\(D_{gas}(t)\\): Gas depreciation expense in year \\(t\\)</li> <li>\\(PI_{gas}(t)\\): Gas performance incentive in year \\(t\\) (performance incentive scenario only)</li> </ul>"},{"location":"formulas/#electric-system-calculations","title":"Electric System Calculations","text":""},{"location":"formulas/#electric-number-of-customers","title":"Electric Number of customers","text":"<p>The number of electric customers is the initial number of electric customers. There is no growth in the number of electric customers: \\(\\(N_{electric}(t) = N_{electric}(0)\\)\\)</p> <p>Variables:</p> <ul> <li>\\(N_{electric}(t)\\): Number of electric customers in year \\(t\\)</li> <li>\\(N_{electric}(0)\\): Initial number of electric customers</li> </ul>"},{"location":"formulas/#total-electric-usage","title":"Total Electric Usage","text":"<p>Electric usage includes both base electric needs and heating loads from converts:</p> \\[U_{electric}(t) = N_{electric}(0) \\times Q_{electric,kWh} + \\frac{N_{converts}(t) \\times Q_{heating,therms} \\times K_{therm\\to kWh}}{\\eta_{HP}}\\] <p>Variables:</p> <ul> <li>\\(U_{electric}(t)\\): Total electric usage in kWh in year \\(t\\)</li> <li>\\(N_{electric}(0)\\): Initial number of electric customers</li> <li>\\(N_{converts}(t)\\): Cumulative electrification converts through year \\(t\\)</li> <li>\\(Q_{electric,kWh}\\): Average per-customer electric need in kWh</li> <li>\\(Q_{heating,therms}\\): Average per-customer heating need in therms</li> <li>\\(K_{therm\\to kWh}\\): Conversion factor from therms to kWh</li> <li>\\(\\eta_{HP}\\): Heat pump efficiency</li> </ul>"},{"location":"formulas/#electric-variable-costs","title":"Electric Variable Costs","text":"<p>Electric utility variable costs are based on total usage and generation costs:</p> \\[C_{electric,var}(t) = U_{electric}(t) \\times P_{electric}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{electric,var}(t)\\): Electric variable costs in year \\(t\\)</li> <li>\\(U_{electric}(t)\\): Total electric usage in kWh in year \\(t\\)</li> <li>\\(P_{electric}(t)\\): Electricity generation cost per kWh in year \\(t\\)</li> </ul>"},{"location":"formulas/#electric-fixed-costs","title":"Electric Fixed Costs","text":"<p>Electric fixed costs include overhead, maintenance, and NPA OPEX:</p> \\[C_{electric,fixed}(t) = C_{electric,overhead}(t) + C_{electric,maintenance}(t) + C_{electric,NPA,opex}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{electric,fixed}(t)\\): Electric fixed costs in year \\(t\\)</li> <li>\\(C_{electric,overhead}(t)\\): Electric fixed overhead costs in year     \\(t\\)</li> <li>\\(C_{electric,maintenance}(t)\\): Electric maintenance costs in year     \\(t\\)</li> <li>\\(C_{electric,NPA,opex}(t)\\): Electric NPA OPEX in year \\(t\\)</li> </ul>"},{"location":"formulas/#electric-operating-expenses-costs","title":"Electric Operating Expenses Costs","text":"<p>Total electric operating expenses combine fixed and variable costs:</p> \\[C_{electric,opex}(t) = C_{electric,fixed}(t) + C_{electric,var}(t)\\] <p>Variables:</p> <ul> <li>\\(C_{electric,opex}(t)\\): Electric OPEX costs in year \\(t\\)</li> <li>\\(C_{electric,fixed}(t)\\): Electric fixed costs in year \\(t\\)</li> <li>\\(C_{electric,var}(t)\\): Electric variable costs in year \\(t\\)</li> </ul>"},{"location":"formulas/#electric-revenue-requirement","title":"Electric Revenue Requirement","text":"<p>The electric revenue requirement includes ratebase return, OPEX, and depreciation:</p> \\[R_{electric}(t) = RB_{electric}(t) \\times ror_{electric} + C_{electric,opex}(t) + D_{electric}(t)\\] <p>Variables:</p> <ul> <li>\\(R_{electric}(t)\\): Electric revenue requirement in year \\(t\\)</li> <li>\\(RB_{electric}(t)\\): Electric ratebase in year \\(t\\)</li> <li>\\(ror_{electric}\\): Electric rate of return</li> <li>\\(C_{electric,opex}(t)\\): Electric OPEX costs in year \\(t\\)</li> <li>\\(D_{electric}(t)\\): Electric depreciation expense in year \\(t\\)</li> </ul>"},{"location":"formulas/#electric-grid-upgrades","title":"Electric Grid Upgrades","text":"<p>The cost of electric grid upgrades is determined by the peak kW increase from heat pumps and air conditioning, multiplied by a per-peak kW distribution cost:</p> \\[C_{grid,upgrade}(t) = \\Delta kW_{peak}(t) \\times P_{peak,kw}\\] <p>where the peak kW increase is:</p> \\[\\Delta kW_{peak}(t) = \\sum_{p \\in P(t)} \\left[ N_{NPAconverts}(p) \\times \\left( kW_{HP,peak} + (kW_{AC,peak} \\times (1 - a_{pre})) \\right) \\right]\\] <p>Variables:</p> <ul> <li>\\(C_{grid,upgrade}(t)\\): Grid upgrade capital cost in year \\(t\\)</li> <li>\\(\\Delta kW_{peak}(t)\\): Total peak kW increase in year \\(t\\)</li> <li>\\(P_{peak,kw}\\): Distribution cost per peak kW increase</li> <li>\\(P(t)\\): Set of NPA projects in year \\(t\\)</li> <li>\\(N_{NPAconverts}(p)\\): Number of converts in project \\(p\\)</li> <li>\\(kW_{HP,peak}\\): Peak kW per heat pump</li> <li>\\(kW_{AC,peak}\\): Peak kW per air conditioner</li> <li>\\(a_{pre}\\): Pre-NPA air conditioner adoption rate</li> </ul>"},{"location":"formulas/#bill-cost-calculations","title":"Bill Cost Calculations","text":""},{"location":"formulas/#inflation-adjusted-revenue-requirement","title":"Inflation-Adjusted Revenue Requirement","text":"<p>Revenue requirements are adjusted for inflation using the discount rate:</p> \\[R_{adj}(t) = \\frac{R(t)}{(1 + d)^{t - t_0}}\\] <p>Variables:</p> <ul> <li>\\(R_{adj}(t)\\): Inflation-adjusted revenue requirement in year \\(t\\)</li> <li>\\(R(t)\\): Revenue requirement in year \\(t\\)</li> <li>\\(d\\): Discount rate</li> <li>\\(t_0\\): Start year</li> </ul>"},{"location":"formulas/#bill-per-customer","title":"Bill Per customer","text":"<p>The basic bill per customer calculation averages the inflation-adjusted revenue requirement over the number of customers:</p> \\[B_{per\\_customer}(t) = \\frac{R_{adj}(t)}{N_{customers}(t)}\\] <p>Variables:</p> <ul> <li>\\(B_{per\\_customer}(t)\\): Bill per customer in year \\(t\\)</li> <li>\\(R_{adj}(t)\\): Inflation-adjusted revenue requirement in year \\(t\\)</li> <li>\\(N_{customers}(t)\\): Number of customers in year \\(t\\)</li> </ul>"},{"location":"formulas/#electric-fixed-charge-per-customer","title":"Electric Fixed Charge Per customer","text":"<p>The fixed charge of customers bills is a model input. We hold this constant over time:</p> <ul> <li>\\(C_{electric,fixed,per\\_customer}\\): Electric fixed charge per     customer in year \\(t\\) (user input)</li> </ul>"},{"location":"formulas/#electric-customer-volumetric-tariff-per-kwh","title":"Electric Customer Volumetric Tariff Per kWh","text":"<p>Electric volumetric tariffs are allocated per kWh on the total inflation-adjusted revenue requirement minus the fixed charge revenue:</p> \\[C_{electric,var,kWh}(t) =  \\frac{(R_{electric,adj}(t) - C_{electric,fixed,per\\_customer} \\times N_{customers}(t))}{U_{electric}(t)}\\] <p>Variables:</p> <ul> <li>\\(C_{electric,var,kWh}(t)\\): Electric volumetric tariff per kWh in     year \\(t\\)</li> <li>\\(U_{electric}(t)\\): Total electric usage in kWh in year \\(t\\)</li> <li>\\(R_{electric,adj}(t)\\): Inflation-adjusted electric revenue     requirement in year \\(t\\)</li> <li>\\(C_{electric,fixed,per\\_customer}\\): Electric fixed charge per     customer in year \\(t\\) (user input)</li> <li>\\(N_{customers}(t)\\): Number of customers in year \\(t\\)</li> </ul>"},{"location":"formulas/#gas-fixed-charge-per-customer","title":"Gas Fixed Charge Per customer","text":"<p>The fixed charge of customers bills is a model input. We hold this constant over time:</p> <ul> <li>\\(C_{gas,fixed,per\\_customer}\\): Gas fixed charge per customer in year     \\(t\\) (user input)</li> </ul>"},{"location":"formulas/#gas-customer-volumetric-tariff-per-therm","title":"Gas Customer Volumetric Tariff Per Therm","text":"<p>Gas volumetric tariffs are allocated per therm on the total inflation-adjusted revenue requirement minus the fixed charge revenue:</p> \\[C_{gas,var,therm}(t) =  \\frac{(R_{gas,adj}(t) - C_{gas,fixed,per\\_customer} \\times N_{customers}(t))}{U_{gas}(t)}\\] <p>Variables:</p> <ul> <li>\\(C_{gas,var,therm}(t)\\): Gas volumetric tariff per therm in year \\(t\\)</li> <li>\\(R_{gas,adj}(t)\\): Inflation-adjusted gas revenue requirement in year     \\(t\\)</li> <li>\\(C_{gas,fixed,per\\_customer}(t)\\): Gas fixed charge per customer in     year \\(t\\) (user input)</li> <li>\\(N_{customers}(t)\\): Number of customers in year \\(t\\)</li> <li>\\(U_{gas}(t)\\): Total gas usage in therms in year \\(t\\)</li> </ul>"},{"location":"formulas/#converts-electric-bill-per-customer","title":"Converts Electric Bill Per customer","text":"<p>Electric bills for converts include both base electric needs and heating loads:</p> \\[B_{electric,converts}(t) = C_{electric,fixed,per\\_customer} + C_{electric,var,kWh}(t) \\times \\left(Q_{electric,kWh} + \\frac{Q_{heating,therms} \\times K_{therm\\to kWh}}{\\eta_{HP}}\\right)\\] <p>Variables:</p> <ul> <li>\\(B_{electric,converts}(t)\\): Electric bill per customer for converts     in year \\(t\\)</li> <li>\\(C_{electric,fixed,per\\_customer}\\): Electric fixed charge per customer (user input)</li> <li>\\(C_{electric,var,kWh}(t)\\): Electric volumetric tariff per kWh in year \\(t\\)</li> <li>\\(Q_{electric,kWh}\\): Average per-customer electric need in kWh</li> <li>\\(Q_{heating,therms}\\): Average per-customer heating need in therms</li> <li>\\(K_{therm\\to kWh}\\): Conversion factor from therms to kWh</li> <li>\\(\\eta_{HP}\\): Heat pump efficiency</li> </ul>"},{"location":"formulas/#non-converts-electric-bill-per-customer","title":"Non-Converts Electric Bill Per customer","text":"<p>Electric bills for non-converts include only base electric needs:</p> \\[B_{electric,nonconverts}(t) = C_{electric,fixed,per\\_customer} + C_{electric,var,kWh}(t) \\times Q_{electric,kWh}\\] <p>Variables:</p> <ul> <li>\\(B_{electric,nonconverts}(t)\\): Electric bill per customer for     non-converts in year \\(t\\)</li> <li>\\(C_{electric,fixed,per\\_customer}\\): Electric fixed charge per customer (user input)</li> <li>\\(C_{electric,var,kWh}(t)\\): Electric volumetric tariff per kWh in year \\(t\\)</li> <li>\\(Q_{electric,kWh}\\): Average per-customer electric need in kWh</li> </ul>"},{"location":"formulas/#converts-total-bill-per-customer","title":"Converts Total Bill Per customer","text":"<p>Total bills for converts include both gas and electric components:</p> \\[B_{total,converts}(t) = B_{electric,converts}(t)\\] <p>Variables:</p> <ul> <li>\\(B_{total,converts}(t)\\): Total bill per customer for converts in     year \\(t\\)</li> <li>\\(B_{electric,converts}(t)\\): Electric bill per customer for converts in year \\(t\\)</li> </ul>"},{"location":"formulas/#non-converts-total-bill-per-customer","title":"Non-Converts Total Bill Per customer","text":"<p>Total bills for non-converts include both gas and electric components:</p> \\[B_{total,nonconverts}(t) = B_{gas,nonconverts}(t) + B_{electric,nonconverts}(t)\\] <p>Variables:</p> <ul> <li>\\(B_{total,nonconverts}(t)\\): Total bill per customer for non-converts     in year \\(t\\)</li> <li>\\(B_{gas,nonconverts}(t)\\): Gas bill per customer for non-converts in     year \\(t\\)</li> <li>\\(B_{electric,nonconverts}(t)\\): Electric bill per customer for non-converts in year \\(t\\)</li> </ul>"},{"location":"formulas/#depreciation-and-inflation-calculations","title":"Depreciation and Inflation Calculations","text":""},{"location":"formulas/#net-present-value-npv-calculation","title":"Net Present Value (NPV) Calculation","text":"<p>The NPV calculation evaluates utility investments by considering both the return on ratebase and depreciation recovery over the investment lifetime:</p> \\[NPV = -C_0 + \\sum_{t=1}^{L} \\frac{R_t + D_t}{(1 + r)^t}\\] <p>where:</p> <ul> <li>\\(R_t = C_0 \\times f_{dep}(t) \\times ror\\) (return on remaining ratebase value)</li> <li>\\(D_t = \\frac{C_0}{L}\\) (annual depreciation recovery)</li> <li>\\(f_{dep}(t) = \\max(0, 1 - \\frac{t}{L})\\) (remaining value fraction)</li> </ul> <p>Variables:</p> <ul> <li>\\(NPV\\): Net present value of the investment</li> <li>\\(C_0\\): Initial investment cost</li> <li>\\(L\\): Investment lifetime in years</li> <li>\\(R_t\\): Annual return on ratebase in year \\(t\\)</li> <li>\\(D_t\\): Annual depreciation recovery in year \\(t\\)</li> <li>\\(ror\\): Rate of return on ratebase</li> <li>\\(r\\): NPV discount rate</li> <li>\\(f_{dep}(t)\\): Depreciation fraction in year \\(t\\)</li> </ul>"},{"location":"formulas/#ratebase-calculation","title":"Ratebase Calculation","text":"<p>The depreciation fraction determines how much of a project's original cost remains in the ratebase:</p> \\[f_{dep}(t, t_p, L) = \\max\\left(0, 1 - \\frac{t - t_p}{L}\\right)\\] <p>The total ratebase is the sum of all projects' remaining values:</p> \\[RB(t) = \\sum_{p} f_{dep}(t, t_p, L_p) \\times C_p\\] <p>Variables:</p> <ul> <li>\\(f_{dep}(t, t_p, L)\\): Depreciation fraction for project \\(p\\) in year     \\(t\\)</li> <li>\\(RB(t)\\): Total ratebase in year \\(t\\)</li> <li>\\(t\\): Current year</li> <li>\\(t_p\\): Project year for project \\(p\\)</li> <li>\\(L\\): Depreciation lifetime</li> <li>\\(L_p\\): Depreciation lifetime for project \\(p\\)</li> <li>\\(C_p\\): Original cost of project \\(p\\)</li> </ul>"},{"location":"formulas/#depreciation-expense","title":"Depreciation Expense","text":"<p>Annual depreciation expense uses straight-line depreciation:</p> \\[D(t) = \\sum_{p} \\begin{cases} \\frac{C_p}{L_p} &amp; \\text{if } t_p &lt; t \\leq t_p + L_p \\\\ 0 &amp; \\text{otherwise} \\end{cases}\\] <p>Variables:</p> <ul> <li>\\(D(t)\\): Total depreciation expense in year \\(t\\)</li> <li>\\(t\\): Current year</li> <li>\\(C_p\\): Original cost of project \\(p\\)</li> <li>\\(L_p\\): Depreciation lifetime for project \\(p\\)</li> <li>\\(t_p\\): Project year for project \\(p\\)</li> </ul>"},{"location":"formulas/#maintenance-costs","title":"Maintenance Costs","text":"<p>Annual maintenance costs are calculated as a percentage of original project costs for non-NPA capex projects still in service:</p> \\[C_{maintenance}(t) = m_{pct} \\times  \\sum_{p} \\begin{cases} C_{p_{non-NPA}} &amp; \\text{if } t_p &lt; t \\leq t_p + L_p \\\\ 0 &amp; \\text{otherwise} \\end{cases}\\] <p>Variables:</p> <ul> <li>\\(C_{maintenance}(t)\\): Total maintenance costs in year \\(t\\)</li> <li>\\(t\\): Current year</li> <li>\\(m_{pct}\\): Maintenance cost percentage</li> <li>\\(C_{p_{non-NPA}}\\): Original cost of non-NPA project \\(p\\)</li> <li>\\(t_p\\): Project year for project \\(p\\)</li> <li>\\(L_p\\): Depreciation lifetime for project \\(p\\)</li> </ul>"},{"location":"formulas/#synthetic-initial-projects","title":"Synthetic Initial Projects","text":"<p>For synthetic initial projects representing existing infrastructure, the total weight calculation is:</p> \\[W_{total} = \\frac{L \\times (L + 1)}{2 \\times L} = \\frac{L + 1}{2}\\] <p>The estimated original cost per year is:</p> \\[C_{est} = \\frac{RB_{init}}{W_{total}}\\] <p>This creates a table of synthetic project with uniform original costs of that would results in the inital ratebase value in year 0. Variables:</p> <ul> <li>\\(W_{total}\\): Total weight for synthetic initial projects</li> <li>\\(L\\): Depreciation lifetime</li> <li>\\(RB_{init}\\): Initial ratebase</li> <li>\\(C_{est}\\): Estimated original cost per year</li> </ul>"},{"location":"formulas/#performance-incentive-calculations","title":"Performance Incentive Calculations","text":""},{"location":"formulas/#performance-incentive-mechanism","title":"Performance Incentive Mechanism","text":"<p>The performance incentive mechanism models shared savings between utilities and ratepayers for NPA (Non-Pipe Alternative) projects. This mechanism treats NPA costs and avoided BAU (Business-As-Usual) costs differently:</p> <p>NPA Costs Treatment: - NPA costs are treated as gas OpEx (operating expenses) - Collected in the year costs are incurred - No rate of return earned on NPA investments</p> <p>BAU Costs Treatment: - Avoided BAU costs (what would have been spent replacing LPP) are treated as normal CapEx - User sets ROR and depreciation period equal to pipeline lifetime - Earns return on ratebase over depreciation lifetime</p> <p>Cost Savings Calculation: Cost savings are calculated as the NPV difference between avoided BAU costs and NPA costs:</p> \\[Savings_{NPV}(t) = NPV_{BAU}(t) - C_{gas,NPA,opex}(t)\\] <p>where: - \\(NPV_{BAU}(t)\\) = NPV of avoided LPP spending in year \\(t\\) - \\(C_{gas,NPA,opex}(t)\\) = NPA investment costs in year \\(t\\)</p> <p>Performance Incentive Distribution: 30% of cost savings are collected from ratepayers, evenly split over a 10-year period:</p> \\[PI_{annual}(t) = \\frac{0.30 \\times Savings_{NPV}(t)}{10}\\] <p>Variables:</p> <ul> <li>\\(Savings_{NPV}(t)\\): NPV savings from NPA projects in year \\(t\\)</li> <li>\\(NPV_{BAU}(t)\\): NPV of avoided BAU costs in year \\(t\\)</li> <li>\\(C_{gas,NPA,opex}(t)\\): NPA OPEX in year \\(t\\)</li> <li>\\(PI_{annual}(t)\\): Annual performance incentive payment in year \\(t\\)</li> </ul>"},{"location":"formulas/#performance-incentive-revenue-requirement-impact","title":"Performance Incentive Revenue Requirement Impact","text":"<p>In the performance incentive scenario, the gas revenue requirement includes the annual performance incentive payments:</p> \\[R_{gas,PI}(t) = R_{gas}(t) + \\sum_{i=0}^{9} PI_{annual}(t-i)\\] <p>where the summation includes performance incentive payments from all active savings projects (those initiated in years \\(t-9\\) through \\(t\\)).</p> <p>Variables:</p> <ul> <li>\\(R_{gas,PI}(t)\\): Gas revenue requirement including performance incentives in year \\(t\\)</li> <li>\\(R_{gas}(t)\\): Standard gas revenue requirement in year \\(t\\)</li> <li>\\(PI_{annual}(t-i)\\): Annual performance incentive payment from savings project initiated in year \\(t-i\\)</li> </ul>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#npa_howtopay.model","title":"<code>npa_howtopay.model</code>","text":""},{"location":"modules/#npa_howtopay.model.YearContext","title":"<code>YearContext</code>  <code>dataclass</code>","text":"<p>Context for all values needed in a given year</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>@dataclass\nclass YearContext:\n    \"\"\"Context for all values needed in a given year\"\"\"\n\n    year: int\n    gas_ratebase: float\n    electric_ratebase: float\n    gas_depreciation_expense: float\n    electric_depreciation_expense: float\n    gas_maintenance_cost: float\n    electric_maintenance_cost: float\n    gas_npa_opex: float\n    electric_npa_opex: float\n    gas_performance_incentive: float\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_avg_bill_per_user","title":"<code>calculate_avg_bill_per_user(inflation_adjusted_revenue, num_users)</code>","text":"<p>Calculate the average bill per user by dividing total revenue by number of users.</p> <p>Parameters:</p> Name Type Description Default <code>inflation_adjusted_revenue</code> <code>float</code> <p>Total revenue adjusted for inflation</p> required <code>num_users</code> <code>int</code> <p>Total number of users to divide revenue among</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Average bill amount per user</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_avg_bill_per_user(inflation_adjusted_revenue: float, num_users: int) -&gt; float:\n    \"\"\"Calculate the average bill per user by dividing total revenue by number of users.\n\n    Args:\n        inflation_adjusted_revenue: Total revenue adjusted for inflation\n        num_users: Total number of users to divide revenue among\n\n    Returns:\n        float: Average bill amount per user\n    \"\"\"\n    return inflation_adjusted_revenue / num_users\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_converts_electric_bill_per_user","title":"<code>calculate_converts_electric_bill_per_user(electric_fixed_charge, electric_variable_tariff, per_user_electric_need, per_user_heating_need, per_user_water_heating_need, hp_efficiency, water_heater_efficiency)</code>","text":"<p>Calculate electric bill per user for converts (includes heating).</p> <p>Parameters:</p> Name Type Description Default <code>electric_fixed_charge</code> <code>float</code> <p>Fixed charge per user</p> required <code>electric_variable_tariff</code> <code>float</code> <p>Variable tariff per kWh</p> required <code>per_user_electric_need</code> <code>float</code> <p>Electric need per user</p> required <code>per_user_heating_need</code> <code>float</code> <p>Heating need per user (therms)</p> required <code>per_user_water_heating_need</code> <code>float</code> <p>Water heating need per user (therms)</p> required <code>hp_efficiency</code> <code>float</code> <p>Heat pump efficiency</p> required <code>water_heater_efficiency</code> <code>float</code> <p>Water heater efficiency</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Electric bill per user for converts</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_converts_electric_bill_per_user(\n    electric_fixed_charge: float,\n    electric_variable_tariff: float,\n    per_user_electric_need: float,\n    per_user_heating_need: float,\n    per_user_water_heating_need: float,\n    hp_efficiency: float,\n    water_heater_efficiency: float,\n) -&gt; float:\n    \"\"\"Calculate electric bill per user for converts (includes heating).\n\n    Args:\n        electric_fixed_charge: Fixed charge per user\n        electric_variable_tariff: Variable tariff per kWh\n        per_user_electric_need: Electric need per user\n        per_user_heating_need: Heating need per user (therms)\n        per_user_water_heating_need: Water heating need per user (therms)\n        hp_efficiency: Heat pump efficiency\n        water_heater_efficiency: Water heater efficiency\n\n    Returns:\n        float: Electric bill per user for converts\n    \"\"\"\n    add_on_usage = (\n        per_user_heating_need * KWH_PER_THERM / hp_efficiency\n        + per_user_water_heating_need * KWH_PER_THERM / water_heater_efficiency\n    )\n    return electric_fixed_charge + electric_variable_tariff * (per_user_electric_need + add_on_usage)\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_converts_total_bill_per_user","title":"<code>calculate_converts_total_bill_per_user(converts_gas_bill, converts_electric_bill)</code>","text":"<p>Calculate total bill per user for converts (gas + electric).</p> <p>Parameters:</p> Name Type Description Default <code>converts_gas_bill</code> <code>float</code> <p>Gas bill per user for converts</p> required <code>converts_electric_bill</code> <code>float</code> <p>Electric bill per user for converts</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total bill per user for converts</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_converts_total_bill_per_user(converts_gas_bill: float, converts_electric_bill: float) -&gt; float:\n    \"\"\"Calculate total bill per user for converts (gas + electric).\n\n    Args:\n        converts_gas_bill: Gas bill per user for converts\n        converts_electric_bill: Electric bill per user for converts\n\n    Returns:\n        float: Total bill per user for converts\n    \"\"\"\n    return converts_gas_bill + converts_electric_bill\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_electric_fixed_charge_per_user","title":"<code>calculate_electric_fixed_charge_per_user(fixed_charge)</code>","text":"<p>Return electric fixed charge per user. Currently a user defined constant</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_electric_fixed_charge_per_user(fixed_charge: float) -&gt; float:\n    \"\"\"Return electric fixed charge per user. Currently a user defined constant\"\"\"\n    return fixed_charge\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_electric_variable_tariff_per_kwh","title":"<code>calculate_electric_variable_tariff_per_kwh(electric_infl_adj_revenue, total_electric_usage_kwh, fixed_charge, num_users)</code>","text":"<p>Calculate electric variable cost per kWh.</p> <p>Parameters:</p> Name Type Description Default <code>electric_infl_adj_revenue</code> <code>float</code> <p>Total electric revenue adjusted for inflation</p> required <code>total_electric_usage_kwh</code> <code>float</code> <p>Total electric usage in kWh</p> required <code>fixed_charge</code> <code>float</code> <p>Fixed charge per user</p> required <code>num_users</code> <code>int</code> <p>Number of users</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Variable cost per kWh calculated by subtracting total fixed charges   from revenue and dividing by total usage</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_electric_variable_tariff_per_kwh(\n    electric_infl_adj_revenue: float, total_electric_usage_kwh: float, fixed_charge: float, num_users: int\n) -&gt; float:\n    \"\"\"Calculate electric variable cost per kWh.\n\n    Args:\n        electric_infl_adj_revenue: Total electric revenue adjusted for inflation\n        total_electric_usage_kwh: Total electric usage in kWh\n        fixed_charge: Fixed charge per user\n        num_users: Number of users\n\n    Returns:\n        float: Variable cost per kWh calculated by subtracting total fixed charges\n              from revenue and dividing by total usage\n    \"\"\"\n    return (electric_infl_adj_revenue - num_users * fixed_charge) / total_electric_usage_kwh\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_gas_fixed_charge_per_user","title":"<code>calculate_gas_fixed_charge_per_user(fixed_charge)</code>","text":"<p>Return gas fixed cost per user. Currently a user defined constant</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_gas_fixed_charge_per_user(fixed_charge: float) -&gt; float:\n    \"\"\"Return gas fixed cost per user. Currently a user defined constant\"\"\"\n    return fixed_charge\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_gas_variable_tariff_per_therm","title":"<code>calculate_gas_variable_tariff_per_therm(gas_infl_adj_revenue, total_gas_usage_therms, fixed_charge, num_users)</code>","text":"<p>Calculate gas variable cost per therm.</p> <p>Parameters:</p> Name Type Description Default <code>gas_infl_adj_revenue</code> <code>float</code> <p>Total gas revenue adjusted for inflation</p> required <code>total_gas_usage_therms</code> <code>float</code> <p>Total gas usage in therms</p> required <code>fixed_charge</code> <code>float</code> <p>Fixed charge per user</p> required <code>num_users</code> <code>int</code> <p>Number of users</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Variable cost per therm calculated by subtracting total fixed charges   from revenue and dividing by total usage</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_gas_variable_tariff_per_therm(\n    gas_infl_adj_revenue: float,\n    total_gas_usage_therms: float,\n    fixed_charge: float,\n    num_users: int,\n) -&gt; float:\n    \"\"\"Calculate gas variable cost per therm.\n\n    Args:\n        gas_infl_adj_revenue: Total gas revenue adjusted for inflation\n        total_gas_usage_therms: Total gas usage in therms\n        fixed_charge: Fixed charge per user\n        num_users: Number of users\n\n    Returns:\n        float: Variable cost per therm calculated by subtracting total fixed charges\n              from revenue and dividing by total usage\n    \"\"\"\n    return (gas_infl_adj_revenue - num_users * fixed_charge) / total_gas_usage_therms\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_nonconverts_electric_bill_per_user","title":"<code>calculate_nonconverts_electric_bill_per_user(electric_fixed_charge, electric_variable_tariff, per_user_electric_need)</code>","text":"<p>Calculate electric bill per user for nonconverts (no heating).</p> <p>Parameters:</p> Name Type Description Default <code>electric_fixed_charge</code> <code>float</code> <p>Fixed charge per user</p> required <code>electric_variable_tariff</code> <code>float</code> <p>Variable tariff per kWh</p> required <code>per_user_electric_need</code> <code>float</code> <p>Electric need per user</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Electric bill per user for nonconverts</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_nonconverts_electric_bill_per_user(\n    electric_fixed_charge: float, electric_variable_tariff: float, per_user_electric_need: float\n) -&gt; float:\n    \"\"\"Calculate electric bill per user for nonconverts (no heating).\n\n    Args:\n        electric_fixed_charge: Fixed charge per user\n        electric_variable_tariff: Variable tariff per kWh\n        per_user_electric_need: Electric need per user\n\n    Returns:\n        float: Electric bill per user for nonconverts\n    \"\"\"\n    return electric_fixed_charge + electric_variable_tariff * per_user_electric_need\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_nonconverts_gas_bill_per_user","title":"<code>calculate_nonconverts_gas_bill_per_user(gas_fixed_charge, gas_variable_tariff, per_user_heating_need)</code>","text":"<p>Calculate gas bill per user for nonconverts.</p> <p>Parameters:</p> Name Type Description Default <code>gas_fixed_charge</code> <code>float</code> <p>Fixed charge per user</p> required <code>gas_variable_tariff</code> <code>float</code> <p>Variable tariff per therm</p> required <code>per_user_heating_need</code> <code>float</code> <p>Heating need per user</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Gas bill per user for nonconverts</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_nonconverts_gas_bill_per_user(\n    gas_fixed_charge: float, gas_variable_tariff: float, per_user_heating_need: float\n) -&gt; float:\n    \"\"\"Calculate gas bill per user for nonconverts.\n\n    Args:\n        gas_fixed_charge: Fixed charge per user\n        gas_variable_tariff: Variable tariff per therm\n        per_user_heating_need: Heating need per user\n\n    Returns:\n        float: Gas bill per user for nonconverts\n    \"\"\"\n    return gas_fixed_charge + gas_variable_tariff * per_user_heating_need\n</code></pre>"},{"location":"modules/#npa_howtopay.model.calculate_nonconverts_total_bill_per_user","title":"<code>calculate_nonconverts_total_bill_per_user(nonconverts_gas_bill, nonconverts_electric_bill)</code>","text":"<p>Calculate total bill per user for nonconverts (gas + electric).</p> <p>Parameters:</p> Name Type Description Default <code>nonconverts_gas_bill</code> <code>float</code> <p>Gas bill per user for nonconverts</p> required <code>nonconverts_electric_bill</code> <code>float</code> <p>Electric bill per user for nonconverts</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total bill per user for nonconverts</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def calculate_nonconverts_total_bill_per_user(nonconverts_gas_bill: float, nonconverts_electric_bill: float) -&gt; float:\n    \"\"\"Calculate total bill per user for nonconverts (gas + electric).\n\n    Args:\n        nonconverts_gas_bill: Gas bill per user for nonconverts\n        nonconverts_electric_bill: Electric bill per user for nonconverts\n\n    Returns:\n        float: Total bill per user for nonconverts\n    \"\"\"\n    return nonconverts_gas_bill + nonconverts_electric_bill\n</code></pre>"},{"location":"modules/#npa_howtopay.model.compute_bill_costs","title":"<code>compute_bill_costs(df, input_params)</code>","text":"<p>Compute bill costs and tariffs for gas and electric utilities.</p> <p>Takes a DataFrame with revenue requirements and usage data and computes: - Inflation adjusted revenue requirements for gas and electric - Fixed charges per user and Variable tariffs per therm (gas) and kWh (electric) - Utility bills per user for converts and nonconverts - Total bills per user for converts and nonconverts</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing revenue requirements and usage data</p> required <code>input_params</code> <code>InputParams</code> <p>Input parameters containing utility rates and user counts</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with added columns for adjusted revenue requirements and tariffs</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def compute_bill_costs(\n    df: pl.DataFrame,\n    input_params: InputParams,\n) -&gt; pl.DataFrame:\n    \"\"\"Compute bill costs and tariffs for gas and electric utilities.\n\n    Takes a DataFrame with revenue requirements and usage data and computes:\n    - Inflation adjusted revenue requirements for gas and electric\n    - Fixed charges per user and Variable tariffs per therm (gas) and kWh (electric)\n    - Utility bills per user for converts and nonconverts\n    - Total bills per user for converts and nonconverts\n\n    Args:\n        df: DataFrame containing revenue requirements and usage data\n        input_params: Input parameters containing utility rates and user counts\n\n    Returns:\n        DataFrame with added columns for adjusted revenue requirements and tariffs\n    \"\"\"\n    start_year = df.select(pl.col(\"year\")).min().item()\n\n    # Create inflation-adjusted revenue requirement columns\n    df = df.with_columns([\n        pl.struct([\"gas_revenue_requirement\", \"year\"])\n        .map_elements(\n            lambda x: inflation_adjust_revenue_requirement(\n                x[\"gas_revenue_requirement\"], x[\"year\"], start_year, input_params.shared.real_dollar_discount_rate\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"gas_inflation_adjusted_revenue_requirement\"),\n        pl.struct([\"electric_revenue_requirement\", \"year\"])\n        .map_elements(\n            lambda x: inflation_adjust_revenue_requirement(\n                x[\"electric_revenue_requirement\"], x[\"year\"], start_year, input_params.shared.real_dollar_discount_rate\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"electric_inflation_adjusted_revenue_requirement\"),\n        (pl.col(\"gas_revenue_requirement\") + pl.col(\"electric_revenue_requirement\")).alias(\"total_revenue_requirement\"),\n    ])\n\n    # Create gas and electric tariffs columns (and total inflation adjusted revenue requirement)\n    df = df.with_columns([\n        (\n            pl.col(\"gas_inflation_adjusted_revenue_requirement\")\n            + pl.col(\"electric_inflation_adjusted_revenue_requirement\")\n        ).alias(\"total_inflation_adjusted_revenue_requirement\"),\n        pl.struct([\"gas_inflation_adjusted_revenue_requirement\", \"total_gas_usage_therms\"])\n        .map_elements(\n            lambda x: calculate_gas_variable_tariff_per_therm(\n                x[\"gas_inflation_adjusted_revenue_requirement\"],\n                x[\"total_gas_usage_therms\"],\n                input_params.gas.user_bill_fixed_charge,\n                input_params.gas.num_users_init,\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"gas_variable_tariff_per_therm\"),\n        pl.struct([\"electric_inflation_adjusted_revenue_requirement\", \"total_electric_usage_kwh\"])\n        .map_elements(\n            lambda x: calculate_electric_variable_tariff_per_kwh(\n                x[\"electric_inflation_adjusted_revenue_requirement\"],\n                x[\"total_electric_usage_kwh\"],\n                input_params.electric.user_bill_fixed_charge,\n                input_params.electric.num_users_init,\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"electric_variable_tariff_per_kwh\"),\n        pl.lit(\n            calculate_electric_fixed_charge_per_user(\n                input_params.electric.user_bill_fixed_charge,\n            )\n        ).alias(\"electric_fixed_charge_per_user\"),\n        pl.lit(\n            calculate_gas_fixed_charge_per_user(\n                input_params.gas.user_bill_fixed_charge,\n            )\n        ).alias(\"gas_fixed_charge_per_user\"),\n    ])\n\n    # Create per-user gas bill columns and total inflation adjusted revenue requirement\n    df = df.with_columns([\n        pl.struct([\"gas_inflation_adjusted_revenue_requirement\", \"gas_num_users\"])\n        .map_elements(\n            lambda x: calculate_avg_bill_per_user(x[\"gas_inflation_adjusted_revenue_requirement\"], x[\"gas_num_users\"]),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"gas_avg_bill_per_user\"),\n        pl.struct([\"gas_fixed_charge_per_user\", \"gas_variable_tariff_per_therm\"])\n        .map_elements(\n            lambda x: calculate_nonconverts_gas_bill_per_user(\n                x[\"gas_fixed_charge_per_user\"],\n                x[\"gas_variable_tariff_per_therm\"],\n                input_params.gas.per_user_heating_need_therms,\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"gas_nonconverts_bill_per_user\"),\n        pl.lit(0.0).alias(\"gas_converts_bill_per_user\"),\n    ])\n\n    # Create converts and nonconverts electric bills\n    df = df.with_columns([\n        pl.struct([\"electric_inflation_adjusted_revenue_requirement\", \"electric_num_users\"])\n        .map_elements(\n            lambda x: calculate_avg_bill_per_user(\n                x[\"electric_inflation_adjusted_revenue_requirement\"], x[\"electric_num_users\"]\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"electric_avg_bill_per_user\"),\n        pl.struct([\"electric_fixed_charge_per_user\", \"electric_variable_tariff_per_kwh\"])\n        .map_elements(\n            lambda x: calculate_converts_electric_bill_per_user(\n                x[\"electric_fixed_charge_per_user\"],\n                x[\"electric_variable_tariff_per_kwh\"],\n                input_params.electric.per_user_electric_need_kwh,\n                input_params.gas.per_user_heating_need_therms,\n                input_params.gas.per_user_water_heating_need_therms,\n                input_params.electric.hp_efficiency,\n                input_params.electric.water_heater_efficiency,\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"electric_converts_bill_per_user\"),\n        pl.struct([\"electric_fixed_charge_per_user\", \"electric_variable_tariff_per_kwh\"])\n        .map_elements(\n            lambda x: calculate_nonconverts_electric_bill_per_user(\n                x[\"electric_fixed_charge_per_user\"],\n                x[\"electric_variable_tariff_per_kwh\"],\n                input_params.electric.per_user_electric_need_kwh,\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"electric_nonconverts_bill_per_user\"),\n    ])\n\n    # Create total bill calculations for converts and nonconverts\n    df = df.with_columns([\n        pl.struct([\"gas_converts_bill_per_user\", \"electric_converts_bill_per_user\"])\n        .map_elements(\n            lambda x: calculate_converts_total_bill_per_user(\n                x[\"gas_converts_bill_per_user\"], x[\"electric_converts_bill_per_user\"]\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"converts_total_bill_per_user\"),\n        pl.struct([\"gas_nonconverts_bill_per_user\", \"electric_nonconverts_bill_per_user\"])\n        .map_elements(\n            lambda x: calculate_nonconverts_total_bill_per_user(\n                x[\"gas_nonconverts_bill_per_user\"], x[\"electric_nonconverts_bill_per_user\"]\n            ),\n            return_dtype=pl.Float64,\n        )\n        .alias(\"nonconverts_total_bill_per_user\"),\n    ])\n\n    return df\n</code></pre>"},{"location":"modules/#npa_howtopay.model.compute_intermediate_cols_electric","title":"<code>compute_intermediate_cols_electric(context, input_params, ts_params)</code>","text":"<p>Compute intermediate columns for electric utility calculations.</p> <p>Calculates electric utility metrics for a given year including: - Number of users and cumulative heat pump converts - Total electric usage in kWh (base usage + heating from converts) - Fixed and volumetric costs - Operating expenses and revenue requirements</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>YearContext</code> <p>Year context containing ratebase, depreciation and maintenance costs</p> required <code>input_params</code> <code>InputParams</code> <p>Input parameters with utility rates and user counts</p> required <code>ts_params</code> <code>TimeSeriesParams</code> <p>Time series parameters with NPA projects and overhead costs</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with calculated electric utility metrics for the given year</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def compute_intermediate_cols_electric(\n    context: YearContext, input_params: InputParams, ts_params: TimeSeriesParams\n) -&gt; pl.DataFrame:\n    \"\"\"Compute intermediate columns for electric utility calculations.\n\n    Calculates electric utility metrics for a given year including:\n    - Number of users and cumulative heat pump converts\n    - Total electric usage in kWh (base usage + heating from converts)\n    - Fixed and volumetric costs\n    - Operating expenses and revenue requirements\n\n    Args:\n        context: Year context containing ratebase, depreciation and maintenance costs\n        input_params: Input parameters with utility rates and user counts\n        ts_params: Time series parameters with NPA projects and overhead costs\n\n    Returns:\n        DataFrame with calculated electric utility metrics for the given year\n    \"\"\"\n    electric_fixed_overhead_costs = (\n        ts_params.electric_fixed_overhead_costs.filter(pl.col(\"year\") == context.year)\n        .select(pl.col(\"cost\"))\n        .sum()\n        .item()\n    )\n    total_converts_cumul = npa.compute_hp_converts_from_df(\n        context.year, ts_params.npa_projects, cumulative=True, npa_only=False\n    )\n    electric_num_users = input_params.electric.num_users_init\n    added_usage = (\n        total_converts_cumul\n        * input_params.gas.per_user_heating_need_therms\n        * KWH_PER_THERM\n        / input_params.electric.hp_efficiency\n        + total_converts_cumul\n        * input_params.gas.per_user_water_heating_need_therms\n        * KWH_PER_THERM\n        / input_params.electric.water_heater_efficiency\n    )\n    total_usage = input_params.electric.num_users_init * input_params.electric.per_user_electric_need_kwh + added_usage\n    costs_volumetric = total_usage * input_params.electric.electricity_generation_cost_per_kwh(context.year)\n    costs_fixed = electric_fixed_overhead_costs + context.electric_maintenance_cost + context.electric_npa_opex\n    opex_costs = costs_fixed + costs_volumetric\n    revenue_requirement = (\n        context.electric_ratebase * input_params.electric.ror + opex_costs + context.electric_depreciation_expense\n    )\n    return_on_ratebase_pct = (\n        context.electric_ratebase * input_params.electric.ror\n    ) / revenue_requirement  # Return on Rate Base as % of Revenue Requirement\n\n    return pl.DataFrame({\n        \"year\": [context.year],\n        \"electric_num_users\": [electric_num_users],\n        \"total_converts_cumul\": [total_converts_cumul],\n        \"electric_added_usage_kwh\": [added_usage],\n        \"total_electric_usage_kwh\": [total_usage],\n        \"electric_costs_volumetric\": [costs_volumetric],\n        \"electric_costs_fixed\": [costs_fixed],\n        \"electric_opex_costs\": [opex_costs],\n        \"electric_revenue_requirement\": [revenue_requirement],\n        \"electric_return_on_ratebase_pct\": [return_on_ratebase_pct],\n    })\n</code></pre>"},{"location":"modules/#npa_howtopay.model.compute_intermediate_cols_gas","title":"<code>compute_intermediate_cols_gas(context, input_params, ts_params)</code>","text":"<p>Compute intermediate columns for gas utility calculations.</p> <p>Calculates gas utility metrics for a given year including: - Number of users (accounting for heat pump converts) - Total gas usage in therms - Fixed and volumetric costs - Operating expenses and revenue requirements</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>YearContext</code> <p>Year context containing ratebase, depreciation and maintenance costs</p> required <code>input_params</code> <code>InputParams</code> <p>Input parameters with utility rates and user counts</p> required <code>ts_params</code> <code>TimeSeriesParams</code> <p>Time series parameters with NPA projects and overhead costs</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with calculated gas utility metrics for the given year</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def compute_intermediate_cols_gas(\n    context: YearContext, input_params: InputParams, ts_params: TimeSeriesParams\n) -&gt; pl.DataFrame:\n    \"\"\"Compute intermediate columns for gas utility calculations.\n\n    Calculates gas utility metrics for a given year including:\n    - Number of users (accounting for heat pump converts)\n    - Total gas usage in therms\n    - Fixed and volumetric costs\n    - Operating expenses and revenue requirements\n\n    Args:\n        context: Year context containing ratebase, depreciation and maintenance costs\n        input_params: Input parameters with utility rates and user counts\n        ts_params: Time series parameters with NPA projects and overhead costs\n\n    Returns:\n        DataFrame with calculated gas utility metrics for the given year\n    \"\"\"\n    gas_fixed_overhead_costs = (\n        ts_params.gas_fixed_overhead_costs.filter(pl.col(\"year\") == context.year).select(pl.col(\"cost\")).sum().item()\n    )\n    gas_num_users = input_params.gas.num_users_init - npa.compute_hp_converts_from_df(\n        context.year, ts_params.npa_projects, cumulative=True, npa_only=False\n    )\n    total_usage = gas_num_users * input_params.gas.per_user_heating_need_therms\n    costs_volumetric = total_usage * input_params.gas.gas_generation_cost_per_therm(context.year)\n    costs_fixed = gas_fixed_overhead_costs + context.gas_maintenance_cost + context.gas_npa_opex\n    opex_costs = costs_fixed + costs_volumetric\n    revenue_requirement = (\n        context.gas_ratebase * input_params.gas.ror\n        + opex_costs\n        + context.gas_depreciation_expense\n        + context.gas_performance_incentive\n    )\n    return_on_ratebase_pct = (\n        context.gas_ratebase * input_params.gas.ror\n    ) / revenue_requirement  # Return on Rate Base as % of Revenue Requirement\n\n    return pl.DataFrame({\n        \"year\": [context.year],\n        \"gas_num_users\": [gas_num_users],\n        \"total_gas_usage_therms\": [total_usage],\n        \"gas_costs_volumetric\": [costs_volumetric],\n        \"gas_costs_fixed\": [costs_fixed],\n        \"gas_opex_costs\": [opex_costs],\n        \"gas_revenue_requirement\": [revenue_requirement],\n        \"gas_return_on_ratebase_pct\": [return_on_ratebase_pct],\n    })\n</code></pre>"},{"location":"modules/#npa_howtopay.model.create_scenario_runs","title":"<code>create_scenario_runs(start_year, end_year, gas_electric, capex_opex)</code>","text":"<p>Create a dictionary of scenario parameters for different model runs.</p> <p>Creates scenarios for business-as-usual (BAU), taxpayer-funded, and combinations of gas/electric and capex/opex interventions. Each scenario specifies the time period and configuration parameters.</p> <p>Parameters:</p> Name Type Description Default <code>start_year</code> <code>int</code> <p>First year of the scenario analysis</p> required <code>end_year</code> <code>int</code> <p>Last year of the scenario analysis</p> required <code>gas_electric</code> <code>list[Literal['gas', 'electric']]</code> <p>List specifying which utilities to analyze (\"gas\" and/or \"electric\")</p> required <code>capex_opex</code> <code>list[Literal['capex', 'opex']]</code> <p>List specifying which cost types to analyze (\"capex\" and/or \"opex\")</p> required <p>Returns:</p> Type Description <code>dict[str, ScenarioParams]</code> <p>Dictionary mapping scenario names to ScenarioParams objects containing the</p> <code>dict[str, ScenarioParams]</code> <p>configuration for that scenario. Includes \"bau\" and \"taxpayer\" base scenarios</p> <code>dict[str, ScenarioParams]</code> <p>plus combinations of gas/electric and capex/opex parameters.</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def create_scenario_runs(\n    start_year: int,\n    end_year: int,\n    gas_electric: list[Literal[\"gas\", \"electric\"]],\n    capex_opex: list[Literal[\"capex\", \"opex\"]],\n) -&gt; dict[str, ScenarioParams]:\n    \"\"\"Create a dictionary of scenario parameters for different model runs.\n\n    Creates scenarios for business-as-usual (BAU), taxpayer-funded, and combinations of\n    gas/electric and capex/opex interventions. Each scenario specifies the time period\n    and configuration parameters.\n\n    Args:\n        start_year: First year of the scenario analysis\n        end_year: Last year of the scenario analysis\n        gas_electric: List specifying which utilities to analyze (\"gas\" and/or \"electric\")\n        capex_opex: List specifying which cost types to analyze (\"capex\" and/or \"opex\")\n\n    Returns:\n        Dictionary mapping scenario names to ScenarioParams objects containing the\n        configuration for that scenario. Includes \"bau\" and \"taxpayer\" base scenarios\n        plus combinations of gas/electric and capex/opex parameters.\n    \"\"\"\n    scenarios = {\n        \"bau\": ScenarioParams(start_year=start_year, end_year=end_year, bau=True),\n        \"taxpayer\": ScenarioParams(start_year=start_year, end_year=end_year, taxpayer=True),\n        \"performance_incentive\": ScenarioParams(\n            start_year=start_year, end_year=end_year, performance_incentive=True, gas_electric=\"gas\", capex_opex=\"opex\"\n        ),\n    }\n\n    # Add the regular scenarios\n    for ge in gas_electric:\n        for co in capex_opex:\n            scenarios[f\"{ge}_{co}\"] = ScenarioParams(\n                start_year=start_year, end_year=end_year, gas_electric=ge, capex_opex=co\n            )\n\n    return scenarios\n</code></pre>"},{"location":"modules/#npa_howtopay.model.inflation_adjust_revenue_requirement","title":"<code>inflation_adjust_revenue_requirement(revenue_req, year, start_year, real_dollar_discount_rate)</code>","text":"<p>Adjust revenue requirement for inflation using discount rate.</p> Source code in <code>src/npa_howtopay/model.py</code> <pre><code>def inflation_adjust_revenue_requirement(\n    revenue_req: float, year: int, start_year: int, real_dollar_discount_rate: float\n) -&gt; float:\n    \"\"\"Adjust revenue requirement for inflation using discount rate.\"\"\"\n    if year &lt; start_year:\n        raise ValueError(f\"Year {year} cannot be before start year {start_year}\")\n    return revenue_req / ((1 + real_dollar_discount_rate) ** (year - start_year))\n</code></pre>"},{"location":"modules/#npa_howtopay.params","title":"<code>npa_howtopay.params</code>","text":""},{"location":"modules/#npa_howtopay.params.TimeSeriesParams","title":"<code>TimeSeriesParams</code>","text":"Source code in <code>src/npa_howtopay/params.py</code> <pre><code>@define\nclass TimeSeriesParams:\n    npa_projects: pl.DataFrame\n    scattershot_electrification: pl.DataFrame\n    gas_fixed_overhead_costs: pl.DataFrame\n    electric_fixed_overhead_costs: pl.DataFrame\n    gas_bau_lpp_costs_per_year: pl.DataFrame\n\n    def __attrs_post_init__(self) -&gt; None:\n        \"\"\"Automatically append scattershot electrification to npa projects. In the BAU scenario, this will only return the scattershot electrification dataframe.\"\"\"\n\n        self.npa_projects = append_scattershot_electrification_df(self.npa_projects, self.scattershot_electrification)\n</code></pre>"},{"location":"modules/#npa_howtopay.params.TimeSeriesParams.__attrs_post_init__","title":"<code>__attrs_post_init__()</code>","text":"<p>Automatically append scattershot electrification to npa projects. In the BAU scenario, this will only return the scattershot electrification dataframe.</p> Source code in <code>src/npa_howtopay/params.py</code> <pre><code>def __attrs_post_init__(self) -&gt; None:\n    \"\"\"Automatically append scattershot electrification to npa projects. In the BAU scenario, this will only return the scattershot electrification dataframe.\"\"\"\n\n    self.npa_projects = append_scattershot_electrification_df(self.npa_projects, self.scattershot_electrification)\n</code></pre>"},{"location":"modules/#npa_howtopay.params.get_available_runs","title":"<code>get_available_runs(data_dir='data')</code>","text":"<p>Get list of available run_names from YAML files</p> Source code in <code>src/npa_howtopay/params.py</code> <pre><code>def get_available_runs(data_dir: str = \"data\") -&gt; list[str]:\n    \"\"\"Get list of available run_names from YAML files\"\"\"\n    import os\n    import glob\n\n    yaml_files = glob.glob(f\"{data_dir}/*.yaml\")\n    return [os.path.splitext(os.path.basename(f))[0] for f in yaml_files]\n</code></pre>"},{"location":"modules/#npa_howtopay.params.load_scenario_from_yaml","title":"<code>load_scenario_from_yaml(run_name, data_dir='data')</code>","text":"<p>Load default parameters for a specific run_name from its YAML file</p> Source code in <code>src/npa_howtopay/params.py</code> <pre><code>def load_scenario_from_yaml(run_name: str, data_dir: str = \"data\") -&gt; InputParams:\n    \"\"\"Load default parameters for a specific run_name from its YAML file\"\"\"\n    from pathlib import Path\n\n    # Get the package directory\n    package_dir = Path(__file__).parent\n    yaml_path = package_dir / data_dir / f\"{run_name}.yaml\"\n\n    return _load_params_from_yaml(str(yaml_path))\n</code></pre>"},{"location":"modules/#npa_howtopay.params.load_time_series_params_from_web_params","title":"<code>load_time_series_params_from_web_params(web_params, start_year, end_year, cost_inflation_rate=0.0)</code>","text":"<p>Load time series parameters from web parameters (scalar values)</p> Source code in <code>src/npa_howtopay/params.py</code> <pre><code>def load_time_series_params_from_web_params(\n    web_params: dict, start_year: int, end_year: int, cost_inflation_rate: float = 0.0\n) -&gt; TimeSeriesParams:\n    \"\"\"Load time series parameters from web parameters (scalar values)\"\"\"\n\n    web_params_obj = WebParams(**web_params)\n    generated_data = create_time_series_from_web_params(web_params_obj, start_year, end_year, cost_inflation_rate)\n\n    return TimeSeriesParams(\n        npa_projects=generated_data[\"npa_projects\"],\n        scattershot_electrification=generated_data[\"scattershot_electrification_users_per_year\"],\n        gas_fixed_overhead_costs=generated_data[\"gas_fixed_overhead_costs\"],\n        electric_fixed_overhead_costs=generated_data[\"electric_fixed_overhead_costs\"],\n        gas_bau_lpp_costs_per_year=generated_data[\"gas_bau_lpp_costs_per_year\"],\n    )\n</code></pre>"},{"location":"modules/#npa_howtopay.params.load_time_series_params_from_yaml","title":"<code>load_time_series_params_from_yaml(run_name, data_dir='data')</code>","text":"<p>Load time series parameters from YAML file</p> Source code in <code>src/npa_howtopay/params.py</code> <pre><code>def load_time_series_params_from_yaml(run_name: str, data_dir: str = \"data\") -&gt; TimeSeriesParams:\n    \"\"\"Load time series parameters from YAML file\"\"\"\n    from pathlib import Path\n\n    # Get the package directory\n    package_dir = Path(__file__).parent\n    yaml_path = package_dir / data_dir / f\"{run_name}.yaml\"\n\n    return _load_time_series_params_from_yaml(str(yaml_path))\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project","title":"<code>npa_howtopay.capex_project</code>","text":""},{"location":"modules/#npa_howtopay.capex_project.NpvSavingsProject","title":"<code>NpvSavingsProject</code>","text":"<p>Represents NPV savings from NPA projects that generate performance incentives.</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>@define\nclass NpvSavingsProject:\n    \"\"\"Represents NPV savings from NPA projects that generate performance incentives.\"\"\"\n\n    project_year: int = field()\n    savings_amount: float = field(validator=validators.ge(0.0))\n    payback_period: int = field(validator=validators.ge(1))\n\n    def to_df(self) -&gt; pl.DataFrame:\n        return pl.DataFrame({\n            \"project_year\": [self.project_year],\n            \"savings_amount\": [self.savings_amount],\n            \"payback_period\": pl.Series([self.payback_period], dtype=pl.Int64),\n            \"end_year\": [self.project_year + self.payback_period],\n        })\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_depreciation_expense_from_capex_projects","title":"<code>compute_depreciation_expense_from_capex_projects(year, df)</code>","text":"<p>Compute annual depreciation expense for capital projects.</p> <p>For each project, depreciation expense is the original cost divided evenly over the depreciation lifetime. Depreciation starts the year after the project year and continues for the depreciation lifetime.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to compute depreciation expense for</p> required <code>df</code> <code>DataFrame</code> <p>DataFrame containing capital projects with columns: - project_year: int - Year project was initiated - original_cost: float - Original cost of the project - depreciation_lifetime: int - Number of years to depreciate over</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total depreciation expense for the year across all projects</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_depreciation_expense_from_capex_projects(year: int, df: pl.DataFrame) -&gt; float:\n    \"\"\"Compute annual depreciation expense for capital projects.\n\n    For each project, depreciation expense is the original cost divided evenly over the depreciation lifetime.\n    Depreciation starts the year after the project year and continues for the depreciation lifetime.\n\n    Args:\n        year: The year to compute depreciation expense for\n        df: DataFrame containing capital projects with columns:\n            - project_year: int - Year project was initiated\n            - original_cost: float - Original cost of the project\n            - depreciation_lifetime: int - Number of years to depreciate over\n\n    Returns:\n        float: Total depreciation expense for the year across all projects\n    \"\"\"\n    return float(\n        df.select(\n            pl.when(\n                (pl.lit(year) &gt; pl.col(\"project_year\"))\n                &amp; (pl.lit(year) &lt;= pl.col(\"project_year\") + pl.col(\"depreciation_lifetime\"))\n            )\n            .then(pl.col(\"original_cost\") / pl.col(\"depreciation_lifetime\"))\n            .otherwise(pl.lit(0))\n        )\n        .sum()\n        .item()\n    )\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_maintanence_costs","title":"<code>compute_maintanence_costs(year, df, maintenance_cost_pct)</code>","text":"<p>Compute annual maintenance costs for capital projects.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to compute maintenance costs for</p> required <code>df</code> <code>DataFrame</code> <p>DataFrame containing capital projects with columns: - project_type: str - Type of project (npa or other) - original_cost: float - Original cost of the project</p> required <code>maintenance_cost_pct</code> <code>float</code> <p>float - Annual maintenance cost as percentage of original cost</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total maintenance costs for the year, excluding NPA projects</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_maintanence_costs(year: int, df: pl.DataFrame, maintenance_cost_pct: float) -&gt; float:\n    \"\"\"Compute annual maintenance costs for capital projects.\n\n    Args:\n        year: The year to compute maintenance costs for\n        df: DataFrame containing capital projects with columns:\n            - project_type: str - Type of project (npa or other)\n            - original_cost: float - Original cost of the project\n        maintenance_cost_pct: float - Annual maintenance cost as percentage of original cost\n\n    Returns:\n        float: Total maintenance costs for the year, excluding NPA projects\n    \"\"\"\n    df = df.filter(pl.col(\"project_type\") != \"npa\", pl.col(\"project_year\") &lt;= year, pl.col(\"retirement_year\") &gt;= year)\n    return float(df.select(pl.col(\"original_cost\")).sum().item() * maintenance_cost_pct)\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_npv_of_capex_investment","title":"<code>compute_npv_of_capex_investment(initial_cost, lifetime, ror, real_dollar_discount_rate, year)</code>","text":"<p>Compute NPV of a capex investment. Year one incurrs a cost, then subsequent years earn a return equal to the ror on the annually depreciated value of the investment.</p> <p>Parameters:</p> Name Type Description Default <code>initial_cost</code> <code>float</code> <p>Initial investment cost</p> required <code>lifetime</code> <code>int</code> <p>Investment lifetime in years</p> required <code>ror</code> <code>float</code> <p>Rate of return on ratebase</p> required <code>real_dollar_discount_rate</code> <code>float</code> <p>Discount rate for NPV</p> required <code>year</code> <code>int</code> <p>Year of investment</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>NPV of the investment</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_npv_of_capex_investment(\n    initial_cost: float, lifetime: int, ror: float, real_dollar_discount_rate: float, year: int\n) -&gt; float:\n    \"\"\"Compute NPV of a capex investment. Year one incurrs a cost, then subsequent years earn a return equal to the ror on the annually depreciated value of the investment.\n\n    Args:\n        initial_cost: Initial investment cost\n        lifetime: Investment lifetime in years\n        ror: Rate of return on ratebase\n        real_dollar_discount_rate: Discount rate for NPV\n        year: Year of investment\n\n    Returns:\n        float: NPV of the investment\n    \"\"\"\n    if initial_cost == 0:\n        return 0.0\n\n    # Initial cost (negative cash flow)\n    npv = -initial_cost\n\n    # Annual returns over lifetime\n    for t in range(1, lifetime + 1):\n        # Annual return = remaining_ratebase_value * ror\n        # Remaining value declines linearly from initial_cost to 0\n        remaining_value_fraction = max(0, 1 - (t - 1) / lifetime)\n        # Return on ratebase\n        return_on_ratebase = initial_cost * remaining_value_fraction * ror\n        # Depreciation recovery\n        depreciation_recovery = initial_cost / lifetime\n\n        # Total annual cash flow\n        annual_cash_flow = return_on_ratebase + depreciation_recovery\n\n        # Discount to present value\n        discount_factor = 1 / ((1 + real_dollar_discount_rate) ** t)\n        npv += annual_cash_flow * discount_factor\n\n    return npv\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_npv_savings_from_npa_projects","title":"<code>compute_npv_savings_from_npa_projects(year, npa_projects, npa_install_cost, npa_lifetime, pipeline_depreciation_lifetime, gas_ror, npv_discount_rate, performance_incentive_pct, incentive_payback_period)</code>","text":"<p>Generate NPV savings projects for NPA installations.</p> <p>This function calculates the NPV difference between NPA investment and avoided LPP spending. The savings are tracked as projects that generate performance incentives over a payback period.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate NPV savings projects for</p> required <code>npa_projects</code> <code>DataFrame</code> <p>DataFrame containing NPA project details</p> required <code>npa_install_cost</code> <code>float</code> <p>Cost per household of installing an NPA</p> required <code>npa_lifetime</code> <code>int</code> <p>Expected lifetime in years of an NPA installation</p> required <code>pipeline_depreciation_lifetime</code> <code>int</code> <p>Depreciation lifetime for avoided pipe projects</p> required <code>gas_ror</code> <code>float</code> <p>Rate of return on gas utility investments</p> required <code>npv_discount_rate</code> <code>float</code> <p>Discount rate for NPV calculations</p> required <code>performance_incentive_pct</code> <code>float</code> <p>Percentage of savings on which gas utility receives a performance incentive</p> required <p>Returns:     pl.DataFrame with columns:         - project_year: Year the NPV savings project was initiated         - savings_amount: Total NPV savings amount         - payback_period: Number of years to pay incentives         - end_year: Year the incentive payments end</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_npv_savings_from_npa_projects(\n    year: int,\n    npa_projects: pl.DataFrame,\n    npa_install_cost: float,\n    npa_lifetime: int,\n    pipeline_depreciation_lifetime: int,\n    gas_ror: float,\n    npv_discount_rate: float,\n    performance_incentive_pct: float,\n    incentive_payback_period: int,\n) -&gt; pl.DataFrame:\n    \"\"\"Generate NPV savings projects for NPA installations.\n\n    This function calculates the NPV difference between NPA investment and avoided LPP spending.\n    The savings are tracked as projects that generate performance incentives over a payback period.\n\n    Args:\n        year: The year to generate NPV savings projects for\n        npa_projects: DataFrame containing NPA project details\n        npa_install_cost: Cost per household of installing an NPA\n        npa_lifetime: Expected lifetime in years of an NPA installation\n        pipeline_depreciation_lifetime: Depreciation lifetime for avoided pipe projects\n        gas_ror: Rate of return on gas utility investments\n        npv_discount_rate: Discount rate for NPV calculations\n        performance_incentive_pct: Percentage of savings on which gas utility receives a performance incentive\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the NPV savings project was initiated\n            - savings_amount: Total NPV savings amount\n            - payback_period: Number of years to pay incentives\n            - end_year: Year the incentive payments end\n    \"\"\"\n    npas_this_year = npa_projects.filter(pl.col(\"project_year\") == year)\n\n    if npas_this_year.height == 0:\n        return return_empty_npv_savings_df()\n\n    # Calculate costs\n    num_converts = compute_hp_converts_from_df(year, npas_this_year, cumulative=False, npa_only=True)\n    npa_investment_cost = npa_install_cost * num_converts\n    avoided_lpp_cost = compute_npa_pipe_cost_avoided_from_df(year, npas_this_year)\n\n    # Calculate NPVs\n    npa_npv = npa_investment_cost  # npa investment is opex so costs are recouped in the same year with no ror\n\n    avoided_lpp_npv = compute_npv_of_capex_investment(\n        initial_cost=avoided_lpp_cost,\n        lifetime=pipeline_depreciation_lifetime,\n        ror=gas_ror,\n        real_dollar_discount_rate=npv_discount_rate,\n        year=year,\n    )\n\n    savings_amount = (avoided_lpp_npv - npa_npv) * performance_incentive_pct\n\n    if savings_amount &gt; 0:\n        return NpvSavingsProject(\n            project_year=year,\n            savings_amount=savings_amount,\n            payback_period=incentive_payback_period,  # 10-year incentive period\n        ).to_df()\n    else:\n        return return_empty_npv_savings_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_performance_incentive_this_year","title":"<code>compute_performance_incentive_this_year(year, df)</code>","text":"<p>Compute the ratebase value for a given year from NPV savings projects.</p> <p>For each savings project, the ratebase value is the savings amount divided by payback period. Projects that haven't started yet (year &lt; project_year) have zero ratebase value. Projects that are fully paid back have zero ratebase value.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to compute ratebase for</p> required <code>df</code> <code>DataFrame</code> <p>DataFrame containing NPV savings projects with columns: - project_year: int - Year project was initiated - savings_amount: float - Total NPV savings amount - payback_period: int - Number of years to pay incentives</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total ratebase value for the year across all savings projects</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_performance_incentive_this_year(year: int, df: pl.DataFrame) -&gt; float:\n    \"\"\"Compute the ratebase value for a given year from NPV savings projects.\n\n    For each savings project, the ratebase value is the savings amount divided by payback period.\n    Projects that haven't started yet (year &lt; project_year) have zero ratebase value.\n    Projects that are fully paid back have zero ratebase value.\n\n    Args:\n        year: The year to compute ratebase for\n        df: DataFrame containing NPV savings projects with columns:\n            - project_year: int - Year project was initiated\n            - savings_amount: float - Total NPV savings amount\n            - payback_period: int - Number of years to pay incentives\n\n    Returns:\n        float: Total ratebase value for the year across all savings projects\n    \"\"\"\n    if df.height == 0:\n        return 0.0\n    df = df.with_columns(\n        pl.when((pl.lit(year) &gt;= pl.col(\"project_year\")) &amp; (pl.lit(year) &lt; pl.col(\"end_year\")))\n        .then(pl.col(\"savings_amount\") / pl.col(\"payback_period\"))\n        .otherwise(pl.lit(0))\n        .alias(\"annual_ratebase_contribution\")\n    )\n    return float(df.select(pl.col(\"annual_ratebase_contribution\")).sum().item())\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.compute_ratebase_from_capex_projects","title":"<code>compute_ratebase_from_capex_projects(year, df)</code>","text":"<p>Compute the ratebase value for a given year from capital projects.</p> <p>For each project, the ratebase value declines linearly from the original cost to zero over the depreciation lifetime. Projects that haven't started yet (year &lt; project_year) have zero ratebase value. Projects that are fully depreciated have zero ratebase value. Projects that are in the year of the project have the full original cost added to the ratebase.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to compute ratebase for</p> required <code>df</code> <code>DataFrame</code> <p>DataFrame containing capital projects with columns: - project_year: int - Year project was initiated - original_cost: float - Original cost of the project - depreciation_lifetime: int - Number of years to depreciate over</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Total ratebase value for the year across all projects</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def compute_ratebase_from_capex_projects(year: int, df: pl.DataFrame) -&gt; float:\n    \"\"\"Compute the ratebase value for a given year from capital projects.\n\n    For each project, the ratebase value declines linearly from the original cost to zero over the depreciation lifetime.\n    Projects that haven't started yet (year &lt; project_year) have zero ratebase value.\n    Projects that are fully depreciated have zero ratebase value.\n    Projects that are in the year of the project have the full original cost added to the ratebase.\n\n    Args:\n        year: The year to compute ratebase for\n        df: DataFrame containing capital projects with columns:\n            - project_year: int - Year project was initiated\n            - original_cost: float - Original cost of the project\n            - depreciation_lifetime: int - Number of years to depreciate over\n\n    Returns:\n        float: Total ratebase value for the year across all projects\n    \"\"\"\n    df = df.with_columns(\n        pl.when(pl.lit(year) &lt; pl.col(\"project_year\"))\n        .then(pl.lit(0))\n        .otherwise((1 - (pl.lit(year) - pl.col(\"project_year\")) / pl.col(\"depreciation_lifetime\")).clip(lower_bound=0))\n        .alias(\"depreciation_fraction\")\n    )\n    return float(df.select(pl.col(\"depreciation_fraction\") * pl.col(\"original_cost\")).sum().item())\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_grid_upgrade_capex_projects","title":"<code>get_grid_upgrade_capex_projects(year, npa_projects, peak_hp_kw, peak_aircon_kw, distribution_cost_per_peak_kw_increase, grid_upgrade_depreciation_lifetime)</code>","text":"<p>Generate capex projects for grid upgrades needed to support NPA installations.</p> <p>This function calculates the required grid upgrades based on the peak power increase from heat pumps and air conditioners installed as part of NPA projects. The cost scales linearly with the total peak power increase.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate projects for</p> required <code>npa_projects</code> <code>DataFrame</code> <p>DataFrame containing NPA project details</p> required <code>peak_hp_kw</code> <code>float</code> <p>Peak power draw in kW for a heat pump</p> required <code>peak_aircon_kw</code> <code>float</code> <p>Peak power draw in kW for an air conditioner</p> required <code>distribution_cost_per_peak_kw_increase</code> <code>float</code> <p>Cost per kW of increasing grid capacity in year of project</p> required <code>grid_upgrade_depreciation_lifetime</code> <code>int</code> <p>Depreciation lifetime in years for grid upgrades</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"grid_upgrade\" for grid capacity upgrades - original_cost: Total cost of grid upgrades - depreciation_lifetime: Depreciation lifetime in years</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_grid_upgrade_capex_projects(\n    year: int,\n    npa_projects: pl.DataFrame,\n    peak_hp_kw: float,\n    peak_aircon_kw: float,\n    distribution_cost_per_peak_kw_increase: float,\n    grid_upgrade_depreciation_lifetime: int,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate capex projects for grid upgrades needed to support NPA installations.\n\n    This function calculates the required grid upgrades based on the peak power increase\n    from heat pumps and air conditioners installed as part of NPA projects. The cost\n    scales linearly with the total peak power increase.\n\n    Args:\n        year: The year to generate projects for\n        npa_projects: DataFrame containing NPA project details\n        peak_hp_kw: Peak power draw in kW for a heat pump\n        peak_aircon_kw: Peak power draw in kW for an air conditioner\n        distribution_cost_per_peak_kw_increase: Cost per kW of increasing grid capacity in year of project\n        grid_upgrade_depreciation_lifetime: Depreciation lifetime in years for grid upgrades\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"grid_upgrade\" for grid capacity upgrades\n            - original_cost: Total cost of grid upgrades\n            - depreciation_lifetime: Depreciation lifetime in years\n    \"\"\"\n    npas_this_year = npa_projects.filter(pl.col(\"project_year\") == year)\n    peak_kw_increase = compute_peak_kw_increase_from_df(year, npas_this_year, peak_hp_kw, peak_aircon_kw)\n    if peak_kw_increase &gt; 0:\n        return CapexProject(\n            project_year=year,\n            project_type=\"grid_upgrade\",\n            original_cost=peak_kw_increase * distribution_cost_per_peak_kw_increase,\n            depreciation_lifetime=grid_upgrade_depreciation_lifetime,\n        ).to_df()\n    else:\n        return return_empty_capex_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_lpp_gas_capex_projects","title":"<code>get_lpp_gas_capex_projects(year, gas_bau_lpp_costs_per_year, npa_projects, depreciation_lifetime)</code>","text":"<p>Generate capex projects for leak-prone pipe (LPP) replacement in the gas system.</p> <p>This function calculates the remaining pipe replacement costs after accounting for pipe replacements avoided by NPA projects. If NPAs avoid all planned pipe replacements in a given year, returns an empty dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate projects for</p> required <code>gas_bau_lpp_costs_per_year</code> <code>DataFrame</code> <p>DataFrame containing business-as-usual pipe replacement costs with columns: - year: Year of planned replacement - cost: Cost of planned replacement Note: Multiple entries may exist per year</p> required <code>npa_projects</code> <code>DataFrame</code> <p>DataFrame containing NPA project details, used to calculate avoided pipe costs</p> required <code>depreciation_lifetime</code> <code>int</code> <p>Depreciation lifetime in years for pipe replacement projects</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"pipeline\" for pipe replacement projects - original_cost: Cost of the project after subtracting avoided costs - depreciation_lifetime: Depreciation lifetime in years - retirement_year: Year the project is fully depreciated</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_lpp_gas_capex_projects(\n    year: int,\n    gas_bau_lpp_costs_per_year: pl.DataFrame,\n    npa_projects: pl.DataFrame,\n    depreciation_lifetime: int,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate capex projects for leak-prone pipe (LPP) replacement in the gas system.\n\n    This function calculates the remaining pipe replacement costs after accounting for pipe\n    replacements avoided by NPA projects. If NPAs avoid all planned pipe replacements in a given\n    year, returns an empty dataframe.\n\n    Args:\n        year: The year to generate projects for\n        gas_bau_lpp_costs_per_year: DataFrame containing business-as-usual pipe replacement costs\n            with columns:\n            - year: Year of planned replacement\n            - cost: Cost of planned replacement\n            Note: Multiple entries may exist per year\n        npa_projects: DataFrame containing NPA project details, used to calculate avoided pipe costs\n        depreciation_lifetime: Depreciation lifetime in years for pipe replacement projects\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"pipeline\" for pipe replacement projects\n            - original_cost: Cost of the project after subtracting avoided costs\n            - depreciation_lifetime: Depreciation lifetime in years\n            - retirement_year: Year the project is fully depreciated\n    \"\"\"\n    npas_this_year = npa_projects.filter(pl.col(\"project_year\") == year)\n    npa_pipe_costs_avoided = compute_npa_pipe_cost_avoided_from_df(year, npas_this_year)\n    bau_pipe_replacement_costs = (\n        gas_bau_lpp_costs_per_year.filter(pl.col(\"year\") == year).select(pl.col(\"cost\")).sum().item()\n    )\n    remaining_pipe_replacement_cost = np.maximum(0, bau_pipe_replacement_costs - npa_pipe_costs_avoided)\n    if remaining_pipe_replacement_cost &gt; 0:\n        return CapexProject(\n            project_year=year,\n            project_type=\"pipeline\",\n            original_cost=remaining_pipe_replacement_cost,\n            depreciation_lifetime=depreciation_lifetime,\n        ).to_df()\n    else:\n        return return_empty_capex_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_non_lpp_gas_capex_projects","title":"<code>get_non_lpp_gas_capex_projects(year, current_ratebase, baseline_non_lpp_gas_ratebase_growth, depreciation_lifetime, construction_inflation_rate)</code>","text":"<p>Generate capex projects for non-LPP (non-leak prone pipe) gas infrastructure.</p> <p>These represent routine gas infrastructure investments not related to pipe replacement or npas, such as meter replacements, regulator stations, etc. The cost is calculated as a percentage of current ratebase, adjusted for construction cost inflation.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate projects for</p> required <code>current_ratebase</code> <code>float</code> <p>Current value of the gas utility's ratebase</p> required <code>baseline_non_lpp_gas_ratebase_growth</code> <code>float</code> <p>Annual growth rate for non-LPP capex as fraction of ratebase</p> required <code>depreciation_lifetime</code> <code>int</code> <p>Blended depreciation lifetime in years for these projects</p> required <code>construction_inflation_rate</code> <code>float</code> <p>Annual inflation rate for construction costs</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"misc\" for miscellaneous gas infrastructure - original_cost: Cost of the project - depreciation_lifetime: Depreciation lifetime in years - retirement_year: Year the project is fully depreciated</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_non_lpp_gas_capex_projects(\n    year: int,\n    current_ratebase: float,\n    baseline_non_lpp_gas_ratebase_growth: float,\n    depreciation_lifetime: int,\n    construction_inflation_rate: float,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate capex projects for non-LPP (non-leak prone pipe) gas infrastructure.\n\n    These represent routine gas infrastructure investments not related to pipe replacement or npas,\n    such as meter replacements, regulator stations, etc. The cost is calculated as a\n    percentage of current ratebase, adjusted for construction cost inflation.\n\n    Args:\n        year: The year to generate projects for\n        current_ratebase: Current value of the gas utility's ratebase\n        baseline_non_lpp_gas_ratebase_growth: Annual growth rate for non-LPP capex as fraction of ratebase\n        depreciation_lifetime: Blended depreciation lifetime in years for these projects\n        construction_inflation_rate: Annual inflation rate for construction costs\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"misc\" for miscellaneous gas infrastructure\n            - original_cost: Cost of the project\n            - depreciation_lifetime: Depreciation lifetime in years\n            - retirement_year: Year the project is fully depreciated\n    \"\"\"\n    return CapexProject(\n        project_year=year,\n        project_type=\"misc\",\n        original_cost=current_ratebase * baseline_non_lpp_gas_ratebase_growth * (1 + construction_inflation_rate),\n        depreciation_lifetime=depreciation_lifetime,\n    ).to_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_non_npa_electric_capex_projects","title":"<code>get_non_npa_electric_capex_projects(year, current_ratebase, baseline_electric_ratebase_growth, depreciation_lifetime, construction_inflation_rate)</code>","text":"<p>Generate capex projects for non-NPA non-grid upgrade electric system upgrades.</p> <p>This function calculates the baseline capital expenditures for the electric system, excluding NPA-related projects. The expenditure grows with both the baseline growth rate and construction inflation.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate projects for</p> required <code>current_ratebase</code> <code>float</code> <p>Current value of the electric utility's ratebase</p> required <code>baseline_electric_ratebase_growth</code> <code>float</code> <p>Annual growth rate of non-NPA electric capex as fraction of ratebase</p> required <code>depreciation_lifetime</code> <code>int</code> <p>Blended depreciation lifetime in years for electric system projects</p> required <code>construction_inflation_rate</code> <code>float</code> <p>Annual inflation rate for construction costs</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"misc\" for miscellaneous electric system upgrades - original_cost: Cost of the project including construction inflation - depreciation_lifetime: Depreciation lifetime in years</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_non_npa_electric_capex_projects(\n    year: int,\n    current_ratebase: float,\n    baseline_electric_ratebase_growth: float,\n    depreciation_lifetime: int,\n    construction_inflation_rate: float,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate capex projects for non-NPA non-grid upgrade electric system upgrades.\n\n    This function calculates the baseline capital expenditures for the electric system,\n    excluding NPA-related projects. The expenditure grows with both the baseline growth rate\n    and construction inflation.\n\n    Args:\n        year: The year to generate projects for\n        current_ratebase: Current value of the electric utility's ratebase\n        baseline_electric_ratebase_growth: Annual growth rate of non-NPA electric capex as fraction of ratebase\n        depreciation_lifetime: Blended depreciation lifetime in years for electric system projects\n        construction_inflation_rate: Annual inflation rate for construction costs\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"misc\" for miscellaneous electric system upgrades\n            - original_cost: Cost of the project including construction inflation\n            - depreciation_lifetime: Depreciation lifetime in years\n    \"\"\"\n    return CapexProject(\n        project_year=year,\n        project_type=\"misc\",\n        original_cost=current_ratebase * baseline_electric_ratebase_growth * (1 + construction_inflation_rate),\n        depreciation_lifetime=depreciation_lifetime,\n    ).to_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_npa_capex_projects","title":"<code>get_npa_capex_projects(year, npa_projects, npa_install_cost, npa_lifetime)</code>","text":"<p>Generate capex projects for NPA (non-pipe alternative) installations.</p> <p>This function calculates the capital costs associated with installing NPAs in a given year. The total cost is based on the number of heat pump conversions and the per-unit installation cost.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year to generate projects for</p> required <code>npa_projects</code> <code>DataFrame</code> <p>DataFrame containing NPA project details</p> required <code>npa_install_cost</code> <code>float</code> <p>Cost per household of installing an NPA</p> required <code>npa_lifetime</code> <code>int</code> <p>Expected lifetime in years of an NPA installation</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"npa\" for NPA installations - original_cost: Total cost of NPA installations - depreciation_lifetime: Depreciation lifetime in years</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_npa_capex_projects(\n    year: int, npa_projects: pl.DataFrame, npa_install_cost: float, npa_lifetime: int\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate capex projects for NPA (non-pipe alternative) installations.\n\n    This function calculates the capital costs associated with installing NPAs in a given year.\n    The total cost is based on the number of heat pump conversions and the per-unit installation cost.\n\n    Args:\n        year: The year to generate projects for\n        npa_projects: DataFrame containing NPA project details\n        npa_install_cost: Cost per household of installing an NPA\n        npa_lifetime: Expected lifetime in years of an NPA installation\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"npa\" for NPA installations\n            - original_cost: Total cost of NPA installations\n            - depreciation_lifetime: Depreciation lifetime in years\n    \"\"\"\n    npas_this_year = npa_projects.filter(pl.col(\"project_year\") == year)\n    npa_total_cost = npa_install_cost * compute_hp_converts_from_df(\n        year, npas_this_year, cumulative=False, npa_only=True\n    )\n    if npa_total_cost &gt; 0:\n        return CapexProject(\n            project_year=year, project_type=\"npa\", original_cost=npa_total_cost, depreciation_lifetime=npa_lifetime\n        ).to_df()\n    else:\n        return return_empty_capex_df()\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.get_synthetic_initial_capex_projects","title":"<code>get_synthetic_initial_capex_projects(start_year, initial_ratebase, depreciation_lifetime)</code>","text":"<p>Generate synthetic capex projects to represent the projects that make up the initial ratebase.</p> <p>Creates a series of historical capex projects that would result in the given initial ratebase value, assuming straight-line depreciation. Uses the triangular number formula to create a uniform distribution of projects over the depreciation lifetime, where each project has the same original cost. Projects are distributed evenly over depreciation_lifetime years leading up to start_year.</p> <p>Parameters:</p> Name Type Description Default <code>start_year</code> <code>int</code> <p>The first year of the model</p> required <code>initial_ratebase</code> <code>float</code> <p>The target ratebase value at start_year</p> required <code>depreciation_lifetime</code> <code>int</code> <p>The blended depreciation lifetime for the synthetic projects</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame with columns: - project_year: Year the project was initiated - project_type: \"synthetic_initial\" - original_cost: Cost of the project - depreciation_lifetime: Depreciation lifetime in years - retirement_year: Year the project is fully depreciated</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def get_synthetic_initial_capex_projects(\n    start_year: int, initial_ratebase: float, depreciation_lifetime: int\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate synthetic capex projects to represent the projects that make up the initial ratebase.\n\n    Creates a series of historical capex projects that would result in the given initial ratebase value, assuming straight-line depreciation. Uses the triangular number formula to create a uniform distribution of projects over the depreciation lifetime, where each project has the same original cost. Projects are distributed evenly over depreciation_lifetime years leading up to start_year.\n\n    Args:\n        start_year: The first year of the model\n        initial_ratebase: The target ratebase value at start_year\n        depreciation_lifetime: The blended depreciation lifetime for the synthetic projects\n\n    Returns:\n        pl.DataFrame with columns:\n            - project_year: Year the project was initiated\n            - project_type: \"synthetic_initial\"\n            - original_cost: Cost of the project\n            - depreciation_lifetime: Depreciation lifetime in years\n            - retirement_year: Year the project is fully depreciated\n    \"\"\"\n    total_weight = (depreciation_lifetime * (depreciation_lifetime + 1) / 2) / depreciation_lifetime\n    est_original_cost_per_year = initial_ratebase / total_weight\n    project_years = range(start_year - depreciation_lifetime + 1, start_year + 1)\n    return pl.DataFrame({\n        \"project_year\": project_years,\n        \"project_type\": [\"synthetic_initial\"] * depreciation_lifetime,\n        \"original_cost\": est_original_cost_per_year,\n        \"depreciation_lifetime\": pl.Series([depreciation_lifetime] * depreciation_lifetime, dtype=pl.Int64),\n        \"retirement_year\": pl.Series([year + depreciation_lifetime for year in project_years], dtype=pl.Int64),\n    })\n</code></pre>"},{"location":"modules/#npa_howtopay.capex_project.return_empty_npv_savings_df","title":"<code>return_empty_npv_savings_df()</code>","text":"<p>Return empty DataFrame for NPV savings projects with proper schema.</p> Source code in <code>src/npa_howtopay/capex_project.py</code> <pre><code>def return_empty_npv_savings_df() -&gt; pl.DataFrame:\n    \"\"\"Return empty DataFrame for NPV savings projects with proper schema.\"\"\"\n    return pl.DataFrame({\n        \"project_year\": pl.Series([], dtype=pl.Int64),\n        \"savings_amount\": pl.Series([], dtype=pl.Float64),\n        \"payback_period\": pl.Series([], dtype=pl.Int64),\n        \"end_year\": pl.Series([], dtype=pl.Int64),\n    })\n</code></pre>"},{"location":"modules/#npa_howtopay.npa_project","title":"<code>npa_howtopay.npa_project</code>","text":""},{"location":"modules/#npa_howtopay.npa_project.append_scattershot_electrification_df","title":"<code>append_scattershot_electrification_df(npa_projects_df, scattershot_electrification_df)</code>","text":"<p>Append a dataframe of scattershot electrification projects to the npa projects df. Scattershot electrification projects match the schema for npa projects, but will only affect the number of users and total electric usage, not anything related to pipe value or grid upgrades. It is meant to capture customers leaving the gas network independent of NPA projects.</p> Source code in <code>src/npa_howtopay/npa_project.py</code> <pre><code>def append_scattershot_electrification_df(\n    npa_projects_df: pl.DataFrame,\n    scattershot_electrification_df: pl.DataFrame,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Append a dataframe of scattershot electrification projects to the npa projects df.\n    Scattershot electrification projects match the schema for npa projects, but will only affect the number of users and total electric usage, not anything related to pipe value or grid upgrades. It is meant to capture customers leaving the gas network independent of NPA projects.\n    \"\"\"\n    scattershot_with_npa_cols = scattershot_electrification_df.with_columns(\n        pl.lit(0.0).alias(\"pipe_value_per_user\"),\n        pl.lit(0.0).alias(\"pipe_decomm_cost_per_user\"),\n        pl.lit(np.inf).alias(\"peak_kw_winter_headroom\"),\n        pl.lit(np.inf).alias(\"peak_kw_summer_headroom\"),\n        pl.lit(0.0).alias(\"aircon_percent_adoption_pre_npa\"),\n        pl.lit(True).alias(\"is_scattershot\"),\n    )\n    return pl.concat([npa_projects_df, scattershot_with_npa_cols])\n</code></pre>"},{"location":"modules/#npa_howtopay.web_params","title":"<code>npa_howtopay.web_params</code>","text":""},{"location":"modules/#npa_howtopay.web_params.create_scattershot_electrification_df","title":"<code>create_scattershot_electrification_df(web_params, start_year, end_year)</code>","text":"<p>Generate a dataframe of scattershot electrification projects, one per year. The projects are distributed evenly across the years. These match the schema for npa projects, but will only affect the number of users, not anything related to pipe value or grid upgrades</p> Source code in <code>src/npa_howtopay/web_params.py</code> <pre><code>def create_scattershot_electrification_df(\n    web_params: WebParams,\n    start_year: int,\n    end_year: int,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate a dataframe of scattershot electrification projects, one per year.\n    The projects are distributed evenly across the years. These match the schema for npa projects, but will only\n    affect the number of users, not anything related to pipe value or grid upgrades\n    \"\"\"\n    years = range(start_year, end_year + 1)\n    num_years = len(years)\n\n    return pl.DataFrame({\n        \"project_year\": list(years),\n        \"num_converts\": [web_params.scattershot_electrification_users_per_year] * num_years,\n    })\n</code></pre>"},{"location":"modules/#npa_howtopay.web_params.create_time_series_from_web_params","title":"<code>create_time_series_from_web_params(web_params, start_year, end_year, cost_inflation_rate=0.0)</code>","text":"<p>Create all time series DataFrames from web parameters</p> Source code in <code>src/npa_howtopay/web_params.py</code> <pre><code>def create_time_series_from_web_params(\n    web_params: WebParams, start_year: int, end_year: int, cost_inflation_rate: float = 0.0\n) -&gt; dict[str, pl.DataFrame]:\n    \"\"\"Create all time series DataFrames from web parameters\"\"\"\n    npa_year_end = web_params.npa_year_end if web_params.npa_year_end is not None else end_year\n    npa_year_start = web_params.npa_year_start if web_params.npa_year_start is not None else start_year\n\n    if npa_year_start &lt; start_year:\n        raise ValueError(\"npa_year_start must be greater than or equal to SharedParams.start_year\")\n    if npa_year_end &gt; end_year:\n        raise ValueError(\"npa_year_end must be less than or equal to npa_end_year\")\n\n    return {\n        \"npa_projects\": create_npa_projects(web_params, npa_year_start, npa_year_end),\n        \"scattershot_electrification_users_per_year\": create_scattershot_electrification_df(\n            web_params, start_year, end_year\n        ),\n        \"gas_fixed_overhead_costs\": create_gas_fixed_overhead_costs(\n            web_params, start_year, end_year, cost_inflation_rate\n        ),\n        \"electric_fixed_overhead_costs\": create_electric_fixed_overhead_costs(\n            web_params, start_year, end_year, cost_inflation_rate\n        ),\n        \"gas_bau_lpp_costs_per_year\": create_gas_bau_lpp_costs_per_year(\n            web_params, start_year, end_year, cost_inflation_rate\n        ),\n    }\n</code></pre>"},{"location":"variable_reference_table/","title":"Input Parameter Reference Table","text":""},{"location":"variable_reference_table/#pipeline-economics","title":"Pipeline Economics","text":"YAML Name Display Label Type Description <code>pipe_value_per_user</code> Pipeline replacement cost float Pipeline replacement cost per NPA household <code>pipeline_depreciation_lifetime</code> Pipeline depreciation int Number of years over which pipeline assets are depreciated for accounting purposes <code>pipeline_maintenance_cost_pct</code> Maintenance cost (%) float Annual maintenance costs as a percentage of total pipeline value"},{"location":"variable_reference_table/#npa-program","title":"NPA Program","text":"YAML Name Display Label Type Description <code>npa_install_costs_init</code> NPA cost per household float Initial cost per household to install NPA equipment (excluding any incentive programs). Cost will grow annually by the cost inflation rate. <code>npa_projects_per_year</code> NPA projects per year int Number of NPA projects completed annually <code>num_converts_per_project</code> Conversions per project int Number of household conversions included in each NPA project <code>npa_year_start</code> NPA start year int Year NPA projects start <code>npa_year_end</code> NPA end year int Year NPA projects end. After the year, the model assumes no more NPA projects are completed. <code>npa_lifetime</code> NPA lifetime (years) int Expected operational lifetime of NPA equipment <code>hp_efficiency</code> HP efficiency int Heat pump coefficient of performance (COP) - units of heat per unit of electricity. Used to estimate additional electric demand after conversion <code>water_heater_efficiency</code> Water heater efficiency int Water heater efficiency - units of heat per unit of electricity. Used to estimate additional electric demand after conversion <code>aircon_percent_adoption_pre_npa</code> Aircon percent adoption pre-NPA float Percentage of households that already have air conditioning before NPA <code>peak_kw_summer_headroom</code> Summer peak headroom (kW) float Peak headroom in summer for the grid feeding these households <code>peak_kw_winter_headroom</code> Winter peak headroom (kW) float Peak headroom in winter for the grid feeding these households"},{"location":"variable_reference_table/#electric-utility","title":"Electric Utility","text":"YAML Name Display Label Type Description <code>electric_num_users_init</code> Number of users float Initial number of customers served by electric utility <code>scattershot_electrification_users_per_year</code> Scattershot electrification users per year int Number of customers who electrified each year, independent of NPAs. This increases overall electric demand and reduces the number of gas customers but has no impact on NPAs or grid upgrades. It is held constant in the BAU scenario. <code>baseline_non_npa_ratebase_growth</code> Baseline non-NPA ratebase growth float Annual growth rate of utility ratebase excluding NPA investments <code>electric_default_depreciation_lifetime</code> Electric default depreciation lifetime int Default number of years over which electric utility assets are depreciated (excluding NPAs). Used to estimate depreciation for synthetic initial capex projects that would result in the initial ratebase. <code>electric_maintenance_cost_pct</code> Electric maintenance cost (%) float Annual maintenance costs as percentage of electric utility ratebase (excluding NPAs) <code>electricity_generation_cost_per_kwh_init</code> Electricity generation cost per kWh float Cost per kilowatt-hour of electricity generation in the initial year. This cost will grow annually by the cost inflation rate. <code>electric_ratebase_init</code> Electric ratebase float Initial value of electric utility's ratebase (total assets) <code>electric_ror</code> Rate of return (%) float Total rate of return, which is a combination of return on capital and return on debt for electric utility investments (after taxes) <code>electric_fixed_overhead_costs</code> Electric fixed overhead costs float Fixed annual overhead costs for electric utility <code>electric_user_bill_fixed_charge</code> Customer bill annual fixed charge (dollars) int Annual fixed charge per customer (dollars) <code>grid_upgrade_depreciation_lifetime</code> Grid upgrade depreciation lifetime int Depreciation lifetime for grid infrastructure upgrades <code>per_user_electric_need_kwh</code> Per user electric need (kWh) float Average annual electricity consumption per customer in kilowatt-hours <code>aircon_peak_kw</code> Aircon peak kW float Peak energy consumption of a household's new air conditioning unit. Used to estimate additional summer electric demand for converters without AC prior to NPA. <code>hp_peak_kw</code> Heat pump peak kW float Maximum electrical demand of new heat pump during peak operation <code>distribution_cost_per_peak_kw_increase_init</code> Distribution cost per peak kW increase float Cost to increase grid capacity by one kilowatt of peak demand. This cost will grow annually by the cost inflation rate."},{"location":"variable_reference_table/#gas-utility","title":"Gas Utility","text":"YAML Name Display Label Type Description <code>gas_num_users_init</code> Number of users float Initial number of customers served by gas utility <code>gas_ratebase_init</code> Gas ratebase float Initial value of gas utility's ratebase (total assets) <code>gas_ror</code> Rate of return (%) float Total rate of return, which is a combination of return on capital and return on debt for gas utility investments (after taxes) <code>gas_fixed_overhead_costs</code> Gas fixed overhead costs float Fixed annual overhead costs for gas utility. These costs will grow annually by the cost inflation rate. <code>gas_bau_lpp_costs_per_year</code> Gas BAU pipeline replacement costs per year float Gas pipeline replacement costs per year without any NPA projects (BAU). These costs will grow annually by the cost inflation rate. <code>baseline_non_lpp_ratebase_growth</code> Baseline non-LPP ratebase growth float Annual growth rate of gas utility ratebase excluding pipeline replacements <code>non_lpp_depreciation_lifetime</code> Non-pipeline depreciation lifetime int Depreciation lifetime for non-pipeline gas utility assets <code>gas_user_bill_fixed_charge</code> Customer bill annual fixed charge (dollars) int Annual fixed charge per customer (dollars) <code>gas_generation_cost_per_therm_init</code> Gas generation cost per therm int Cost per therm of natural gas in the initial year. These costs will grow annually by the cost inflation rate. <code>per_user_heating_need_therms</code> Per user heating need (therms) float Average annual heating demand per customer in therms <code>per_user_water_heating_need_therms</code> Per user water heating need (therms) float Average annual water heating demand per customer in therms"},{"location":"variable_reference_table/#financial-parameters","title":"Financial Parameters","text":"YAML Name Display Label Type Description <code>cost_inflation_rate</code> Cost inflation rate (%) float Nominal annual growth rate applied to costs and expenses <code>construction_inflation_rate</code> Construction inflation rate (%) float Nominal annual growth rate applied to construction costs <code>real_dollar_discount_rate</code> Inflation adjustment rate (%) float Rate at which future costs and expenses are discounted to present results in today's dollars <code>npv_discount_rate</code> NPV discount rate (%) float Real discount rate for calculating net present value of capex projects (used for performance incentive scenario) <code>performance_incentive_pct</code> Performance incentive percentage (%) float Percentage of savings (avoided LPP spending) on which gas utility receives a performance incentive (used for performance incentive scenario) <code>incentive_payback_period</code> Incentive payback period (years) int Number of years to pay incentives (used for performance incentive scenario)"},{"location":"variable_reference_table/#shared-parameters","title":"Shared Parameters","text":"YAML Name Display Label Type Description <code>start_year</code> Start year int First year of the analysis period <code>end_year</code> End year int Last year of the analysis period"}]}